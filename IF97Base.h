/*
Based on IAPW IF97
Code by Yakai Bai
footballses@163.com
2023
*/
#include"math.h"

namespace IF97{
    #define R 0.461526
    #define e 2.718281828459045

    #define eps 1e-7
    #define err 1e-7

    /*
    2,3 bound
    Pressure
    start
    */
    double p_23T(double T)
    {
        double n_23[3]={0.34805185628969e3,-0.11671859879975e1,0.10192970039326e-2};
        double p=n_23[0]+n_23[1]*T+n_23[2]*pow(T,2);
        return p;
    }
    //Temperature
    double T_23p(double p)
    {
        double n_23[3]={0.10192970039326e-2,0.57254459862746e3,0.13918839778870e2};
        double T=n_23[1]+pow(((p-n_23[2])/n_23[0]),0.5);
        return T;
    }
    /*
    Over::cover the range from 623.15 K at a pressure of 16.5292 MPa to 863.15 K at 100 MPa.
    1st block
    Gibbs free energy
    */
    double g_1pT(double p,double T)
    {
        
        double I_1[34]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32};
        double J_1[34]={-2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,-29,-31,-38,-39,-40,-41};
        double n_1[34]={0.14632971213167,-0.84548187169114,-0.3756360367204e1,0.33855169168385e1,-0.95791963387872,0.15772038513228,-0.16616417199501e-1,0.81214629983568e-3,0.28319080123804e-3,-0.60706301565874e-3,-0.18990068218419e-1,-0.32529748770505e-1,-0.21841717175414e-1,-0.5283835796993e-4,-0.47184321073267e-3,-0.30001780793026e-3,0.47661393906987e-4,-0.4414184533084e-5,-0.72694996297594e-15,-0.31679644845054e-4,-0.28270797985312e-5,-0.85205128120103e-9,-0.22425281908000e-5,-0.65171222895601e-6,-0.14341729937924e-12,-0.40516996860117e-6,-0.12734301741641e-8,-0.17424871230634e-9,-0.68762131295531e-18,0.14478307828521e-19,0.26335781662795e-22,-0.11947622640071e-22,0.18228094581404e-23,-0.93537087292458e-25};
        double g=0;
        int i;
        double pp=p/16.53;
        double tt=1386/T;
        for(i=0;i<34;i++)
            g+=n_1[i]*pow((7.1-pp),I_1[i])*pow((tt-1.222),J_1[i]);
        return g;
    }
    //Gibbs free energy_pi
    double g_1p(double p,double T)
    {
        double I_1[34]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32};
        double J_1[34]={-2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,-29,-31,-38,-39,-40,-41};
        double n_1[34]={0.14632971213167,-0.84548187169114,-0.3756360367204e1,0.33855169168385e1,-0.95791963387872,0.15772038513228,-0.16616417199501e-1,0.81214629983568e-3,0.28319080123804e-3,-0.60706301565874e-3,-0.18990068218419e-1,-0.32529748770505e-1,-0.21841717175414e-1,-0.5283835796993e-4,-0.47184321073267e-3,-0.30001780793026e-3,0.47661393906987e-4,-0.4414184533084e-5,-0.72694996297594e-15,-0.31679644845054e-4,-0.28270797985312e-5,-0.85205128120103e-9,-0.22425281908000e-5,-0.65171222895601e-6,-0.14341729937924e-12,-0.40516996860117e-6,-0.12734301741641e-8,-0.17424871230634e-9,-0.68762131295531e-18,0.14478307828521e-19,0.26335781662795e-22,-0.11947622640071e-22,0.18228094581404e-23,-0.93537087292458e-25};
        double g=0;
        int i;
        double pp=p/16.53;
        double tt=1386/T;
        for(i=0;i<34;i++)
            g+=-n_1[i]*I_1[i]*pow((7.1-pp),(I_1[i]-1))*pow((tt-1.222),J_1[i]);
        return g;
    }
    //吉布斯自由焓关于t的导数
    double g_1t(double p,double T)
    {
        double I_1[34]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32};
        double J_1[34]={-2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,-29,-31,-38,-39,-40,-41};
        double n_1[34]={0.14632971213167,-0.84548187169114,-0.3756360367204e1,0.33855169168385e1,-0.95791963387872,0.15772038513228,-0.16616417199501e-1,0.81214629983568e-3,0.28319080123804e-3,-0.60706301565874e-3,-0.18990068218419e-1,-0.32529748770505e-1,-0.21841717175414e-1,-0.5283835796993e-4,-0.47184321073267e-3,-0.30001780793026e-3,0.47661393906987e-4,-0.4414184533084e-5,-0.72694996297594e-15,-0.31679644845054e-4,-0.28270797985312e-5,-0.85205128120103e-9,-0.22425281908000e-5,-0.65171222895601e-6,-0.14341729937924e-12,-0.40516996860117e-6,-0.12734301741641e-8,-0.17424871230634e-9,-0.68762131295531e-18,0.14478307828521e-19,0.26335781662795e-22,-0.11947622640071e-22,0.18228094581404e-23,-0.93537087292458e-25};
        double g=0;
        int i;
        double pp=p/16.53;
        double tt=1386/T;
        for(i=0;i<34;i++)
            g+=n_1[i]*J_1[i]*pow((7.1-pp),I_1[i])*pow((tt-1.222),(J_1[i]-1));
        return g;
    }
    //吉布斯自由焓关于pi的二阶导
    double g_1pp(double p,double T)
    {
        double I_1[34]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32};
        double J_1[34]={-2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,-29,-31,-38,-39,-40,-41};
        double n_1[34]={0.14632971213167,-0.84548187169114,-0.3756360367204e1,0.33855169168385e1,-0.95791963387872,0.15772038513228,-0.16616417199501e-1,0.81214629983568e-3,0.28319080123804e-3,-0.60706301565874e-3,-0.18990068218419e-1,-0.32529748770505e-1,-0.21841717175414e-1,-0.5283835796993e-4,-0.47184321073267e-3,-0.30001780793026e-3,0.47661393906987e-4,-0.4414184533084e-5,-0.72694996297594e-15,-0.31679644845054e-4,-0.28270797985312e-5,-0.85205128120103e-9,-0.22425281908000e-5,-0.65171222895601e-6,-0.14341729937924e-12,-0.40516996860117e-6,-0.12734301741641e-8,-0.17424871230634e-9,-0.68762131295531e-18,0.14478307828521e-19,0.26335781662795e-22,-0.11947622640071e-22,0.18228094581404e-23,-0.93537087292458e-25};
        double g=0;
        int i;
        double pp=p/16.53;
        double tt=1386/T;
        for(i=0;i<34;i++)
            g+=n_1[i]*I_1[i]*(I_1[i]-1)*pow((7.1-pp),(I_1[i]-2))*pow((tt-1.222),J_1[i]);
        return g;
    }
    //吉布斯自由焓关于t的二阶导
    double g_1tt(double p,double T)
    {
        double I_1[34]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32};
        double J_1[34]={-2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,-29,-31,-38,-39,-40,-41};
        double n_1[34]={0.14632971213167,-0.84548187169114,-0.3756360367204e1,0.33855169168385e1,-0.95791963387872,0.15772038513228,-0.16616417199501e-1,0.81214629983568e-3,0.28319080123804e-3,-0.60706301565874e-3,-0.18990068218419e-1,-0.32529748770505e-1,-0.21841717175414e-1,-0.5283835796993e-4,-0.47184321073267e-3,-0.30001780793026e-3,0.47661393906987e-4,-0.4414184533084e-5,-0.72694996297594e-15,-0.31679644845054e-4,-0.28270797985312e-5,-0.85205128120103e-9,-0.22425281908000e-5,-0.65171222895601e-6,-0.14341729937924e-12,-0.40516996860117e-6,-0.12734301741641e-8,-0.17424871230634e-9,-0.68762131295531e-18,0.14478307828521e-19,0.26335781662795e-22,-0.11947622640071e-22,0.18228094581404e-23,-0.93537087292458e-25};
        double g=0;
        int i;
        double pp=p/16.53;
        double tt=1386/T;
        for(i=0;i<34;i++)
            g+=n_1[i]*J_1[i]*(J_1[i]-1)*pow((7.1-pp),I_1[i])*pow((tt-1.222),(J_1[i]-2));
        return g;
    }
    //吉布斯自由焓关于pi，t二者的导数
    double g_1pt(double p,double T)
    {
        double I_1[34]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32};
        double J_1[34]={-2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,-29,-31,-38,-39,-40,-41};
        double n_1[34]={0.14632971213167,-0.84548187169114,-0.3756360367204e1,0.33855169168385e1,-0.95791963387872,0.15772038513228,-0.16616417199501e-1,0.81214629983568e-3,0.28319080123804e-3,-0.60706301565874e-3,-0.18990068218419e-1,-0.32529748770505e-1,-0.21841717175414e-1,-0.5283835796993e-4,-0.47184321073267e-3,-0.30001780793026e-3,0.47661393906987e-4,-0.4414184533084e-5,-0.72694996297594e-15,-0.31679644845054e-4,-0.28270797985312e-5,-0.85205128120103e-9,-0.22425281908000e-5,-0.65171222895601e-6,-0.14341729937924e-12,-0.40516996860117e-6,-0.12734301741641e-8,-0.17424871230634e-9,-0.68762131295531e-18,0.14478307828521e-19,0.26335781662795e-22,-0.11947622640071e-22,0.18228094581404e-23,-0.93537087292458e-25};
        double g=0;
        int i;
        double pp=p/16.53;
        double tt=1386/T;
        for(i=0;i<34;i++)
            g+=-n_1[i]*J_1[i]*I_1[i]*pow((7.1-pp),(I_1[i]-1))*pow((tt-1.222),(J_1[i]-1));
        return g;
    }
    //比容
    double v_1pT(double p,double T)
    {
        double pp=p/16.53;

        double gp=g_1p(p,T);
        double v=R*T*pp*gp/p/1000;
        return v;
    }
    //导数
    double v_1t(double p,double T)
    {
        double pp=p/16.53;
        double tt=1386/T;
        double gp=g_1p(p,T);
        double gpt=g_1pt(p,T);
        double v1t=-R*1386/tt/tt*pp*gp/p/1000+R*1386/tt*pp*gpt/p/1000;
        return v1t;
    }
    double v_1p(double p,double T)
    {
        double pp=p/16.53;

        double gpp=g_1pp(p,T);
        double v1p=R*T*pp*gpp/p/1000;
        return v1p;
        
    }
    //internal energy
    double u_1pT(double p,double T)
    {
        double pp=p/16.53;
        double tt=1386/T;
        double gp=g_1p(p,T);
        double gt=g_1t(p,T);
        double u=R*T*(tt*gt-pp*gp);
        return u;
    }
    //Entropy
    double s_1pT(double p,double T)
    {

        double tt=1386/T;
        double gt=g_1t(p,T);
        double g=g_1pT(p,T);
        double s=R*(tt*gt-g);
        return s;
    }
    //Enthalpy
    double h_1pT(double p,double T)
    {
        double tt=1386/T;
        double gt=g_1t(p,T);
        double h=T*R*tt*gt;
        return h;
    }
    //Cp
    double cp_1pT(double p,double T)
    {
        double tt=1386/T;
        double gtt=g_1tt(p,T);
        double cp=-tt*tt*gtt*R;
        return cp;
    }
    //Cv
    double cv_1pT(double p,double T)
    {
        double tt=1386/T;
        double gp=g_1p(p,T);
        double gpp=g_1pp(p,T);
        double gtt=g_1tt(p,T);
        double gpt=g_1pt(p,T);
        double cv=R*(-tt*tt*gtt+(gp-tt*gpt)*(gp-tt*gpt)/gpp);
        return cv;
    }
    //Sound speed
    double w_1pT(double p,double T)
    {
        double tt=1386/T;
        double gp=g_1p(p,T);
        double gpp=g_1pp(p,T);
        double gtt=g_1tt(p,T);
        double gpt=g_1pt(p,T);
        double w=sqrt(1000*R*T*gp*gp/((gp-tt*gpt)*(gp-tt*gpt)/tt/tt/gtt-gpp));
        return w;
    }
    //反推公式
    //反推温度
    double T_1ph(double p,double h)
    {
        double I_1[20]={0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,3,3,4,5,6};
        double J_1[20]={0,1,2,6,22,32,0,1,2,3,4,10,32,10,32,10,32,32,32,32};
        double n_1[20]={-0.23872489924521e3,0.40421188637945e3,0.11349746881718e3,-0.58457616048039e1,-0.15285482413140e-3,-0.10866707695377e-5,-0.13391744872602e2,0.43211039183559e2,-0.54010067170506e2,0.30535892203916e2,-0.65964749423638e1,0.93965400878363e-2,0.11573647505340e-6,-0.25858641282073e-4,-0.40644363084799e-8,0.66456186191635e-7,0.80670734103027e-10,-0.93477771213947e-12,0.58265442020601e-14,-0.15020185953503e-16};
        double tt=0;
        double hh=h/2500;
        int i;
        for(i=0;i<20;i++)
            tt+=n_1[i]*pow(p,I_1[i])*pow((hh+1),J_1[i]);
        return tt;
    }
    /////
    double T_1ps(double p,double s)
    {
        double I_1[20]={0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,4};
        double J_1[20]={0,1,2,3,11,31,0,1,2,3,12,31,0,1,2,9,31,10,32,32};
        double n_1[20]={0.17478268058307e3,0.34806930892873e2,0.65292584978455e1,0.33039981775489,-0.19281382923196e-6,-0.24909197244573e-22,-0.26107636489332,0.22592965981586,-0.64256463395226e-1,0.78876289270526e-2,0.35672110607366e-9,0.17332496994895e-23,0.56608900654837e-3,-0.32635483139717e-3,0.44778286690632e-4,-0.51322156908507e-9,-0.42522657042207e-25,0.26400441360689e-12,0.78124600459723e-28,-0.30732199903668e-30};
        double tt=0;
        int i;
        for(i=0;i<20;i++)
            tt+=n_1[i]*pow(p,I_1[i])*pow((s+2),J_1[i]);
        return tt;
    }
    //结束 273.15 K ≤ T ≤ 623.15 K ps ( T ) ≤ p ≤ 100 MPa .
    //第二分区的计算 开始
    //吉布斯自由能
    ////////理想气体部分
    double go_2pT(double p,double T)
    {
        double Jo_2[9]={0,1,-5,-4,-3,-2,-1,2,3};
        double no_2[9]={-0.96927686500217e1,0.10086655968018e2,-0.56087911283020e-2,0.71452738081455e-1,-0.40710498223928,0.14240819171444e1,-0.43839511319450e1,-0.28408632460772,0.21268463753307e-1};
        double pp=p;
        double tt=540/T;
        double go=log(pp);
        int i;
        for(i=0;i<9;i++)
            go+=no_2[i]*pow(tt,Jo_2[i]);
        return go;
    }
    //关于pp的导数
    double go_2p(double p,double T)
    {
        return 1/p;
    }
    //关于tt的导数
    double go_2t(double p,double T)
    {
        double Jo_2[9]={0,1,-5,-4,-3,-2,-1,2,3};
        double no_2[9]={-0.96927686500217e1,0.10086655968018e2,-0.56087911283020e-2,0.71452738081455e-1,-0.40710498223928,0.14240819171444e1,-0.43839511319450e1,-0.28408632460772,0.21268463753307e-1};
        double tt=540/T;
        double got=0;
        int i;
        for(i=0;i<9;i++)
            got+=Jo_2[i]*no_2[i]*pow(tt,(Jo_2[i]-1));
        return got;
    }
    //关于pp的二阶导数
    double go_2pp(double p,double T)
    {
        return -1/p/p;
    }
    //关于tt的二阶导数
    double go_2tt(double p,double T)
    {
        double Jo_2[9]={0,1,-5,-4,-3,-2,-1,2,3};
        double no_2[9]={-0.96927686500217e1,0.10086655968018e2,-0.56087911283020e-2,0.71452738081455e-1,-0.40710498223928,0.14240819171444e1,-0.43839511319450e1,-0.28408632460772,0.21268463753307e-1};
        double tt=540/T;
        double gott=0;
        int i;
        for(i=0;i<9;i++)
            gott+=Jo_2[i]*(Jo_2[i]-1)*no_2[i]*pow(tt,(Jo_2[i]-2));
        return gott;
    }
    //关于tt与pp的二阶导数
    double go_2pt(double p,double T)
    {
        return 0;
    }
    //////////保留部分
    double gt_2pT(double p,double T)
    {
        double It_2[43]={1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,6,6,7,7,7,8,8,9,10,10,10,16,16,18,20,20,20,21,22,23,24,24,24};
        double Jt_2[43]={0,1,2,3,6,1,2,4,7,36,0,1,3,6,35,1,2,3,7,3,16,35,0,11,25,8,36,13,4,10,14,29,50,57,20,35,48,21,53,39,26,40,58};
        double nt_2[43]={-0.17731742473213e-2,-0.17834862292358e-1,-0.45996013696365e-1,-0.57581259083432e-1,-0.50325278727930e-1,-0.33032641670203e-4,-0.18948987516315e-3,-0.39392777243355e-2,-0.43797295650573e-1,-0.26674547914087e-4,0.20481737692309e-7,0.43870667284435e-6,-0.32277677238570e-4,-0.15033924542148e-2,-0.40668253562649e-1,-0.78847309559367e-9,0.12790717852285e-7,0.48225372718507e-6,0.22922076337661e-5,-0.16714766451061e-10,-0.21171472321355e-2,-0.23895741934104e2,-0.59059564324270e-17,-0.12621808899101e-5,-0.38946842435739e-1,0.11256211360459e-10,-0.82311340897998e1,0.19809712802088e-7,0.10406965210174e-18,-0.10234747095929e-12,-0.10018179379511e-8,-0.80882908646985e-10,0.10693031879409,-0.33662250574171,0.89185845355421e-24,0.30629316876232e-12,-0.42002467698208e-5,-0.59056029685639e-25,0.37826947613457e-5,-0.12768608934681e-14,0.73087610595061e-28,0.55414715350778e-16,-0.94369707241210e-6};
        double pp=p;
        double tt=540/T;	
        double gt=0;
        int i;
        for(i=0;i<43;i++)
            gt+=nt_2[i]*pow(pp,It_2[i])*pow((tt-0.5),Jt_2[i]);
        return gt;
    }
    //关于pp的导数
    double gt_2p(double p,double T)
    {
        double It_2[43]={1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,6,6,7,7,7,8,8,9,10,10,10,16,16,18,20,20,20,21,22,23,24,24,24};
        double Jt_2[43]={0,1,2,3,6,1,2,4,7,36,0,1,3,6,35,1,2,3,7,3,16,35,0,11,25,8,36,13,4,10,14,29,50,57,20,35,48,21,53,39,26,40,58};
        double nt_2[43]={-0.17731742473213e-2,-0.17834862292358e-1,-0.45996013696365e-1,-0.57581259083432e-1,-0.50325278727930e-1,-0.33032641670203e-4,-0.18948987516315e-3,-0.39392777243355e-2,-0.43797295650573e-1,-0.26674547914087e-4,0.20481737692309e-7,0.43870667284435e-6,-0.32277677238570e-4,-0.15033924542148e-2,-0.40668253562649e-1,-0.78847309559367e-9,0.12790717852285e-7,0.48225372718507e-6,0.22922076337661e-5,-0.16714766451061e-10,-0.21171472321355e-2,-0.23895741934104e2,-0.59059564324270e-17,-0.12621808899101e-5,-0.38946842435739e-1,0.11256211360459e-10,-0.82311340897998e1,0.19809712802088e-7,0.10406965210174e-18,-0.10234747095929e-12,-0.10018179379511e-8,-0.80882908646985e-10,0.10693031879409,-0.33662250574171,0.89185845355421e-24,0.30629316876232e-12,-0.42002467698208e-5,-0.59056029685639e-25,0.37826947613457e-5,-0.12768608934681e-14,0.73087610595061e-28,0.55414715350778e-16,-0.94369707241210e-6};
        double pp=p;
        double tt=540/T;	
        double gtp=0;
        int i;
        for(i=0;i<43;i++)
            gtp+=nt_2[i]*It_2[i]*pow(pp,(It_2[i]-1))*pow((tt-0.5),Jt_2[i]);
        return gtp;
    }
    //关于tt的导数
    double gt_2t(double p,double T)
    {
        double It_2[43]={1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,6,6,7,7,7,8,8,9,10,10,10,16,16,18,20,20,20,21,22,23,24,24,24};
        double Jt_2[43]={0,1,2,3,6,1,2,4,7,36,0,1,3,6,35,1,2,3,7,3,16,35,0,11,25,8,36,13,4,10,14,29,50,57,20,35,48,21,53,39,26,40,58};
        double nt_2[43]={-0.17731742473213e-2,-0.17834862292358e-1,-0.45996013696365e-1,-0.57581259083432e-1,-0.50325278727930e-1,-0.33032641670203e-4,-0.18948987516315e-3,-0.39392777243355e-2,-0.43797295650573e-1,-0.26674547914087e-4,0.20481737692309e-7,0.43870667284435e-6,-0.32277677238570e-4,-0.15033924542148e-2,-0.40668253562649e-1,-0.78847309559367e-9,0.12790717852285e-7,0.48225372718507e-6,0.22922076337661e-5,-0.16714766451061e-10,-0.21171472321355e-2,-0.23895741934104e2,-0.59059564324270e-17,-0.12621808899101e-5,-0.38946842435739e-1,0.11256211360459e-10,-0.82311340897998e1,0.19809712802088e-7,0.10406965210174e-18,-0.10234747095929e-12,-0.10018179379511e-8,-0.80882908646985e-10,0.10693031879409,-0.33662250574171,0.89185845355421e-24,0.30629316876232e-12,-0.42002467698208e-5,-0.59056029685639e-25,0.37826947613457e-5,-0.12768608934681e-14,0.73087610595061e-28,0.55414715350778e-16,-0.94369707241210e-6};
        double pp=p;
        double tt=540/T;	
        double gtt=0;
        int i;
        for(i=0;i<43;i++)
            gtt+=nt_2[i]*Jt_2[i]*pow(pp,It_2[i])*pow((tt-0.5),(Jt_2[i]-1));
        return gtt;
    }
    //关于pp的二阶导数
    double gt_2pp(double p,double T)
    { 
        double It_2[43]={1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,6,6,7,7,7,8,8,9,10,10,10,16,16,18,20,20,20,21,22,23,24,24,24};
        double Jt_2[43]={0,1,2,3,6,1,2,4,7,36,0,1,3,6,35,1,2,3,7,3,16,35,0,11,25,8,36,13,4,10,14,29,50,57,20,35,48,21,53,39,26,40,58};
        double nt_2[43]={-0.17731742473213e-2,-0.17834862292358e-1,-0.45996013696365e-1,-0.57581259083432e-1,-0.50325278727930e-1,-0.33032641670203e-4,-0.18948987516315e-3,-0.39392777243355e-2,-0.43797295650573e-1,-0.26674547914087e-4,0.20481737692309e-7,0.43870667284435e-6,-0.32277677238570e-4,-0.15033924542148e-2,-0.40668253562649e-1,-0.78847309559367e-9,0.12790717852285e-7,0.48225372718507e-6,0.22922076337661e-5,-0.16714766451061e-10,-0.21171472321355e-2,-0.23895741934104e2,-0.59059564324270e-17,-0.12621808899101e-5,-0.38946842435739e-1,0.11256211360459e-10,-0.82311340897998e1,0.19809712802088e-7,0.10406965210174e-18,-0.10234747095929e-12,-0.10018179379511e-8,-0.80882908646985e-10,0.10693031879409,-0.33662250574171,0.89185845355421e-24,0.30629316876232e-12,-0.42002467698208e-5,-0.59056029685639e-25,0.37826947613457e-5,-0.12768608934681e-14,0.73087610595061e-28,0.55414715350778e-16,-0.94369707241210e-6};
        double pp=p;
        double tt=540/T;	
        double gtpp=0;
        int i;
        for(i=0;i<43;i++)
            gtpp+=nt_2[i]*It_2[i]*(It_2[i]-1)*pow(pp,(It_2[i]-2))*pow((tt-0.5),Jt_2[i]);
        return gtpp;
    }
    //关于tt的二阶导数
    double gt_2tt(double p,double T)
    {
        double It_2[43]={1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,6,6,7,7,7,8,8,9,10,10,10,16,16,18,20,20,20,21,22,23,24,24,24};
        double Jt_2[43]={0,1,2,3,6,1,2,4,7,36,0,1,3,6,35,1,2,3,7,3,16,35,0,11,25,8,36,13,4,10,14,29,50,57,20,35,48,21,53,39,26,40,58};
        double nt_2[43]={-0.17731742473213e-2,-0.17834862292358e-1,-0.45996013696365e-1,-0.57581259083432e-1,-0.50325278727930e-1,-0.33032641670203e-4,-0.18948987516315e-3,-0.39392777243355e-2,-0.43797295650573e-1,-0.26674547914087e-4,0.20481737692309e-7,0.43870667284435e-6,-0.32277677238570e-4,-0.15033924542148e-2,-0.40668253562649e-1,-0.78847309559367e-9,0.12790717852285e-7,0.48225372718507e-6,0.22922076337661e-5,-0.16714766451061e-10,-0.21171472321355e-2,-0.23895741934104e2,-0.59059564324270e-17,-0.12621808899101e-5,-0.38946842435739e-1,0.11256211360459e-10,-0.82311340897998e1,0.19809712802088e-7,0.10406965210174e-18,-0.10234747095929e-12,-0.10018179379511e-8,-0.80882908646985e-10,0.10693031879409,-0.33662250574171,0.89185845355421e-24,0.30629316876232e-12,-0.42002467698208e-5,-0.59056029685639e-25,0.37826947613457e-5,-0.12768608934681e-14,0.73087610595061e-28,0.55414715350778e-16,-0.94369707241210e-6};
        double pp=p;
        double tt=540/T;	
        double gttt=0;
        int i;
        for(i=0;i<43;i++)
            gttt+=nt_2[i]*Jt_2[i]*(Jt_2[i]-1)*pow(pp,It_2[i])*pow((tt-0.5),(Jt_2[i]-2));
        return gttt;
    }
    //关于pp与tt的导数
    double gt_2pt(double p,double T)
    {
        double It_2[43]={1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,6,6,7,7,7,8,8,9,10,10,10,16,16,18,20,20,20,21,22,23,24,24,24};
        double Jt_2[43]={0,1,2,3,6,1,2,4,7,36,0,1,3,6,35,1,2,3,7,3,16,35,0,11,25,8,36,13,4,10,14,29,50,57,20,35,48,21,53,39,26,40,58};
        double nt_2[43]={-0.17731742473213e-2,-0.17834862292358e-1,-0.45996013696365e-1,-0.57581259083432e-1,-0.50325278727930e-1,-0.33032641670203e-4,-0.18948987516315e-3,-0.39392777243355e-2,-0.43797295650573e-1,-0.26674547914087e-4,0.20481737692309e-7,0.43870667284435e-6,-0.32277677238570e-4,-0.15033924542148e-2,-0.40668253562649e-1,-0.78847309559367e-9,0.12790717852285e-7,0.48225372718507e-6,0.22922076337661e-5,-0.16714766451061e-10,-0.21171472321355e-2,-0.23895741934104e2,-0.59059564324270e-17,-0.12621808899101e-5,-0.38946842435739e-1,0.11256211360459e-10,-0.82311340897998e1,0.19809712802088e-7,0.10406965210174e-18,-0.10234747095929e-12,-0.10018179379511e-8,-0.80882908646985e-10,0.10693031879409,-0.33662250574171,0.89185845355421e-24,0.30629316876232e-12,-0.42002467698208e-5,-0.59056029685639e-25,0.37826947613457e-5,-0.12768608934681e-14,0.73087610595061e-28,0.55414715350778e-16,-0.94369707241210e-6};
        double pp=p;
        double tt=540/T;	
        double gtpt=0;
        int i;
        for(i=0;i<43;i++)
            gtpt+=nt_2[i]*Jt_2[i]*It_2[i]*pow(pp,(It_2[i]-1))*pow((tt-0.5),(Jt_2[i]-1));
        return gtpt;
    }
    ///////////////////
    //各个参数的求出///
    ///////////////////
    //比容
    double v_2pT(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double gop=go_2p(p,T);
        double gtp=gt_2p(p,T);
        double v=pp*(gop+gtp)*R*T/p/1000;
        return v;
    }
    //导数
    double v_2p(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double gopp=go_2pp(p,T);
        double gtpp=gt_2pp(p,T);
        double v2p=pp*(gopp+gtpp)*R*T/p/1000;
        return v2p;
    }
    double v_2t(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double gop=go_2p(p,T);
        double gtp=gt_2p(p,T);
        double gopt=go_2pt(p,T);
        double gtpt=gt_2pt(p,T);
        double v2t=pp*(gopt+gtpt)*R*540/tt/p/1000-pp*(gop+gtp)*R*540/tt/tt/p/1000;
        return v2t;
    }
    //internal energy
    double u_2pT(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double got=go_2t(p,T);
        double gtt=gt_2t(p,T);
        double gop=go_2p(p,T);
        double gtp=gt_2p(p,T);
        double u=R*T*(tt*(got+gtt)-pp*(gop+gtp));
        return u;
    }
    //Entropy
    double s_2pT(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double got=go_2t(p,T);
        double gtt=gt_2t(p,T);
        double go=go_2pT(p,T);
        double gt=gt_2pT(p,T);
        double s=R*(tt*(got+gtt)-(go+gt));
        return s;
    }
    //Enthalpy
    double h_2pT(double p,double T)
    {
        double tt=540/T;
        double got=go_2t(p,T);
        double gtt=gt_2t(p,T);
        double h=R*T*(got+gtt)*tt;
        return h;
    }
    //Cp
    double cp_2pT(double p,double T)
    {
        double tt=540/T;
        double gott=go_2tt(p,T);
        double gttt=gt_2tt(p,T);
        double cp=-R*tt*tt*(gott+gttt);
        return cp;
    }
    //Cv
    double cv_2pT(double p,double T)
    {
        double tt=540/T;
        double pp=p;
        double gott=go_2tt(p,T);
        double gtp=gt_2p(p,T);
        double gtpp=gt_2pp(p,T);
        double gttt=gt_2tt(p,T);
        double gtpt=gt_2pt(p,T);
        double cv=R*(-tt*tt*(gott+gttt)-pow((1+pp*gtp-tt*pp*gtpt),2)/(1-pp*pp*gtpp));
        return cv;
    }
    //Sound speed
    double w_2pT(double p,double T)
    {
        double tt=540/T;
        double pp=p;
        double gott=go_2tt(p,T);
        double gtp=gt_2p(p,T);
        double gtpp=gt_2pp(p,T);
        double gttt=gt_2tt(p,T);
        double gtpt=gt_2pt(p,T);
        double w=sqrt(R*1000*T*(1+2*pp*gtp+pp*pp*gtp*gtp)/((1-pp*pp*gtpp)+pow((1+pp*gtp-tt*pp*gtpt),2)/tt/tt/(gott+gttt)));
        return w;
    }
    ///////////////////////////
    //Equation (15) covers region 2 of IAPWS-IF97 defined by the following range of
    //temperature and pressure, see Fig. 1:
    //273.15 K ≤ T ≤ 623.15 K 0 < p ≤ ps ( T )Eq.(30)
    //623.15 K < T ≤ 863.15 K 0 < p ≤ p ( T )Eq.(5)
    //863.15 K < T ≤ 1073.15 K 0 < p ≤ 100 MPa
    ////////////////////////////
    //结束
    //补充方程
    //吉布斯自由焓
    //理想气体部分 
    double gseo_2pT(double p,double T)
    {
        double Jo_2[9]={0,1,-5,-4,-3,-2,-1,2,3};
        double no_2[9]={-0.96937268393049e1,0.10087275970006e2,-0.56087911283020e-2,0.71452738081455e-1,-0.40710498223928,0.14240819171444e1,-0.43839511319450e1,-0.28408632460772,0.21268463753307e-1};
        double pp=p;
        double tt=540/T;
        double gseo=log(pp);
        int i;
        for(i=0;i<9;i++)
            gseo+=no_2[i]*pow(tt,Jo_2[i]);
        return gseo;
    }
    //关于pp的导数
    double gseo_2p(double p,double T)
    {
        return 1/p;
    }
    //关于tt的导数
    double gseo_2t(double p,double T)
    {
        double Jo_2[9]={0,1,-5,-4,-3,-2,-1,2,3};
        double no_2[9]={-0.96937268393049e1,0.10087275970006e2,-0.56087911283020e-2,0.71452738081455e-1,-0.40710498223928,0.14240819171444e1,-0.43839511319450e1,-0.28408632460772,0.21268463753307e-1};
        double tt=540/T;
        double gseot=0;
        int i;
        for(i=0;i<9;i++)
            gseot+=Jo_2[i]*no_2[i]*pow(tt,(Jo_2[i]-1));
        return gseot;
    }
    //关于pp的二阶导数
    double gseo_2pp(double p,double T)
    {
        return -1/p/p;
    }
    //关于tt的二阶导数
    double gseo_2tt(double p,double T)
    {
        double Jo_2[9]={0,1,-5,-4,-3,-2,-1,2,3};
        double no_2[9]={-0.96937268393049e1,0.10087275970006e2,-0.56087911283020e-2,0.71452738081455e-1,-0.40710498223928,0.14240819171444e1,-0.43839511319450e1,-0.28408632460772,0.21268463753307e-1};
        double tt=540/T;
        double gseott=0;
        int i;
        for(i=0;i<9;i++)
            gseott+=Jo_2[i]*(Jo_2[i]-1)*no_2[i]*pow(tt,(Jo_2[i]-2));
        return gseott;
    }
    //关于tt与pp的二阶导数
    double gseo_2pt(double p,double T)
    {
        return 0;
    }
    //////////保留部分
    double gset_2pT(double p,double T)
    {
        double It_2[13]={1,1,1,1,2,2,2,3,3,4,4,5,5};
        double Jt_2[13]={0,2,5,11,1,7,16,4,16,7,10,9,10};
        double nt_2[13]={-0.73362260186506e-2,-0.88223831943146e-1,-0.72334555213245e-1,-0.40813178534455e-2,0.20097803380207e-2,-0.53045921898642e-1,-0.76190409086970e-2,-0.63498037657313e-2,-0.86043093028588e-1,0.75321581522770e-2,-0.79238375446139e-2,-0.22888160778447e-3,-0.26456501482810e-2};
        double pp=p;
        double tt=540/T;
        double gset=0;
        int i;
        for(i=0;i<13;i++)
            gset+=nt_2[i]*pow(pp,It_2[i])*pow((tt-0.5),Jt_2[i]);
        return gset;
    }
    //关于pp的导数
    double gset_2p(double p,double T)
    {
        double It_2[13]={1,1,1,1,2,2,2,3,3,4,4,5,5};
        double Jt_2[13]={0,2,5,11,1,7,16,4,16,7,10,9,10};
        double nt_2[13]={-0.73362260186506e-2,-0.88223831943146e-1,-0.72334555213245e-1,-0.40813178534455e-2,0.20097803380207e-2,-0.53045921898642e-1,-0.76190409086970e-2,-0.63498037657313e-2,-0.86043093028588e-1,0.75321581522770e-2,-0.79238375446139e-2,-0.22888160778447e-3,-0.26456501482810e-2};
        double pp=p;
        double tt=540/T;
        double gsetp=0;
        int i;
        for(i=0;i<13;i++)
            gsetp+=nt_2[i]*It_2[i]*pow(pp,(It_2[i]-1))*pow((tt-0.5),Jt_2[i]);
        return gsetp;
    }
    //关于tt的导数
    double gset_2t(double p,double T)
    {
        double It_2[13]={1,1,1,1,2,2,2,3,3,4,4,5,5};
        double Jt_2[13]={0,2,5,11,1,7,16,4,16,7,10,9,10};
        double nt_2[13]={-0.73362260186506e-2,-0.88223831943146e-1,-0.72334555213245e-1,-0.40813178534455e-2,0.20097803380207e-2,-0.53045921898642e-1,-0.76190409086970e-2,-0.63498037657313e-2,-0.86043093028588e-1,0.75321581522770e-2,-0.79238375446139e-2,-0.22888160778447e-3,-0.26456501482810e-2};
        double pp=p;
        double tt=540/T;
        double gsett=0;
        int i;
        for(i=0;i<13;i++)
            gsett+=nt_2[i]*Jt_2[i]*pow(pp,It_2[i])*pow((tt-0.5),(Jt_2[i]-1));
        return gsett;
    }
    //关于pp的二阶导数
    double gset_2pp(double p,double T)
    {
        double It_2[13]={1,1,1,1,2,2,2,3,3,4,4,5,5};
        double Jt_2[13]={0,2,5,11,1,7,16,4,16,7,10,9,10};
        double nt_2[13]={-0.73362260186506e-2,-0.88223831943146e-1,-0.72334555213245e-1,-0.40813178534455e-2,0.20097803380207e-2,-0.53045921898642e-1,-0.76190409086970e-2,-0.63498037657313e-2,-0.86043093028588e-1,0.75321581522770e-2,-0.79238375446139e-2,-0.22888160778447e-3,-0.26456501482810e-2};
        double pp=p;
        double tt=540/T;
        double gsetpp=0;
        int i;
        for(i=0;i<13;i++)
            gsetpp+=nt_2[i]*It_2[i]*(It_2[i]-1)*pow(pp,(It_2[i]-2))*pow((tt-0.5),Jt_2[i]);
        return gsetpp;
    }
    //关于tt的二阶导数
    double gset_2tt(double p,double T)
    {
        double It_2[13]={1,1,1,1,2,2,2,3,3,4,4,5,5};
        double Jt_2[13]={0,2,5,11,1,7,16,4,16,7,10,9,10};
        double nt_2[13]={-0.73362260186506e-2,-0.88223831943146e-1,-0.72334555213245e-1,-0.40813178534455e-2,0.20097803380207e-2,-0.53045921898642e-1,-0.76190409086970e-2,-0.63498037657313e-2,-0.86043093028588e-1,0.75321581522770e-2,-0.79238375446139e-2,-0.22888160778447e-3,-0.26456501482810e-2};
        double pp=p;
        double tt=540/T;
        double gsettt=0;
        int i;
        for(i=0;i<13;i++)
            gsettt+=nt_2[i]*Jt_2[i]*(Jt_2[i]-1)*pow(pp,It_2[i])*pow((tt-0.5),(Jt_2[i]-2));
        return gsettt;
    }
    //关于pp与tt的导数
    double gset_2pt(double p,double T)
    {
        double It_2[13]={1,1,1,1,2,2,2,3,3,4,4,5,5};
        double Jt_2[13]={0,2,5,11,1,7,16,4,16,7,10,9,10};
        double nt_2[13]={-0.73362260186506e-2,-0.88223831943146e-1,-0.72334555213245e-1,-0.40813178534455e-2,0.20097803380207e-2,-0.53045921898642e-1,-0.76190409086970e-2,-0.63498037657313e-2,-0.86043093028588e-1,0.75321581522770e-2,-0.79238375446139e-2,-0.22888160778447e-3,-0.26456501482810e-2};
        double pp=p;
        double tt=540/T;
        double gsetpt=0;
        int i;
        for(i=0;i<13;i++)
            gsetpt+=nt_2[i]*Jt_2[i]*It_2[i]*pow(pp,(It_2[i]-1))*pow((tt-0.5),(Jt_2[i]-1));
        return gsetpt;
    }
    ///////////////////
    //各个参数的求出///
    ///////////////////
    //比容
    double vse_2pT(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double gseop=gseo_2p(p,T);
        double gsetp=gset_2p(p,T);
        double vse=pp*(gseop+gsetp)*R*T/p/1000;
        return vse;
    }
    //internal energy
    double use_2pT(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double gseot=gseo_2t(p,T);
        double gsett=gset_2t(p,T);
        double gseop=gseo_2p(p,T);
        double gsetp=gset_2p(p,T);
        double use=R*T*(tt*(gseot+gsett)-pp*(gseop+gsetp));
        return use;
    }
    //Entropy
    double sse_2pT(double p,double T)
    {
        double pp=p;
        double tt=540/T;
        double gseot=gseo_2t(p,T);
        double gsett=gset_2t(p,T);
        double gseo=gseo_2pT(p,T);
        double gset=gset_2pT(p,T);
        double sse=R*(tt*(gseot+gsett)-(gseo+gset));
        return sse;
    }
    //Enthalpy
    double hse_2pT(double p,double T)
    {
        double tt=540/T;
        double gseot=gseo_2t(p,T);
        double gsett=gset_2t(p,T);
        double hse=R*T*(gseot+gsett)*tt;
        return hse;
    }
    //Cp
    double cpse_2pT(double p,double T)
    {
        double tt=540/T;
        double gseott=gseo_2tt(p,T);
        double gsettt=gset_2tt(p,T);
        double cpse=-R*tt*tt*(gseott+gsettt);
        return cpse;
    }
    //Cv
    double cvse_2pT(double p,double T)
    {
        double tt=540/T;
        double pp=p;
        double gseott=gseo_2tt(p,T);
        double gsetp=gset_2p(p,T);
        double gsetpp=gset_2pp(p,T);
        double gsettt=gset_2tt(p,T);
        double gsetpt=gset_2pt(p,T);
        double cvse=R*(-tt*tt*(gseott+gsettt)-pow((1+pp*gsetp-tt*pp*gsetpt),2)/(1-pp*pp*gsetpp));
        return cvse;
    }
    //Sound speed
    double wse_2pT(double p,double T)
    {
        double tt=540/T;
        double pp=p;
        double gseott=gseo_2tt(p,T);
        double gsetp=gset_2p(p,T);
        double gsetpp=gset_2pp(p,T);
        double gsettt=gset_2tt(p,T);
        double gsetpt=gset_2pt(p,T);
        double wse=sqrt(R*1000*T*(1+2*pp*gsetp+pp*pp*gsetp*gsetp)/((1-pp*pp*gsetpp)+pow((1+pp*gsetp-tt*pp*gsetpt),2)/tt/tt/(gseott+gsettt)));
        return wse;
    }
    ///////////////////////////
    //Equation (18) is valid in the metastable-vapor region from the saturated vapor line to the
    //5 % equilibrium moisture line (determined from the equilibrium h′ and h′′ values) at pressures
    //from the triple-point pressure, see Eq. (9), up to 10 MPa.
    //////////////////////////////////////////////////////////////
    //反推方程共分为a，b，c三个分区
    //分区线2b与2c
    double p_2bch(double h)
    {
        double n[3]={0.90584278514723e3,-0.67955786399241,0.12809002730136e-3};
        double p=n[0]+n[1]*h+n[2]*h*h;
        return p;
    }
    double h_2bcp(double p)
    {
        double n[3]={0.12809002730136e-3,0.26526571908428e4,0.45257578905948e1};
        double h=n[1]+sqrt((p-n[2])/n[0]);
        return h;
    }
    //s = 5.85-----the saturation state at T = 554.485 K and ps = 6.546 70 MPa to T = 1019.32 K and p = 100 MPa.
    //a区ph

    double T_2aph(double p,double h)
    {
        double I_2a[34]={0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,4,4,4,5,5,5,6,6,7};
        double J_2a[34]={0,1,2,3,7,20,0,1,2,3,7,9,11,18,44,0,2,7,36,38,40,42,44,24,44,12,32,44,32,36,42,34,44,28};
        double n_2a[34]={0.10898952318288e4,0.84951654495535e3,-0.10781748091826e3,0.33153654801263e2,-0.74232016790248e1,0.11765048724356e2,0.18445749355790e1,-0.41792700549624e1,0.62478196935812e1,-0.17344563108114e2,-0.20058176862096e3,0.27196065473796e3,-0.45511318285818e3,0.30919688604755e4,0.25226640357872e6,-0.61707422868339e-2,-0.31078046629583,0.11670873077107e2,0.12812798404046e9,-0.98554909623276e9,0.28224546973002e10,-0.35948971410703e10,0.17227349913197e10,-0.13551334240775e5,0.12848734664650e8,0.13865724283226e1,0.23598832556514e6,-0.13105236545054e8,0.73999835474766e4,-0.55196697030060e6,0.37154085996233e7,0.19127729239660e5,-0.41535164835634e6,-0.62459855192507e2};
        double hh=h/2000;
        double T=0;
        int i;
        for(i=0;i<34;i++)
            T+=n_2a[i]*pow(p,I_2a[i])*pow((hh-2.1),J_2a[i]);
        return T;
    }
    //b区ph

    double T_2bph(double p,double h)
    {
        double I_2b[38]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4,4,5,5,5,6,7,7,9,9};
        double J_2b[38]={0,1,2,12,18,24,28,40,0,2,6,12,18,24,28,40,2,8,18,40,1,2,12,24,2,12,18,24,28,40,18,24,40,28,2,28,1,40};
        double n_2b[38]={0.14895041079516e4,0.74307798314034e3,-0.97708318797837e2,0.24742464705674e1,-0.63281320016026,0.11385952129658e1,-0.47811863648625,0.85208123431544e-2,0.93747147377932,0.33593118604916e1,0.33809355601454e1,0.16844539671904,0.73875745236695,-0.47128737436186,0.15020273139707,-0.21764114219750e-2,-0.21810755324761e-1,-0.10829784403677,-0.46333324635812e-1,0.71280351959551e-4,0.11032831789999e-3,0.18955248387902e-3,0.30891541160537e-2,0.13555504554949e-2,0.28640237477456e-6,-0.10779857357512e-4,-0.76462712454814e-4,0.14052392818316e-4,-0.31083814331434e-4,-0.10302738212103e-5,0.28217281635040e-6,0.12704902271945e-5,0.73803353468292e-7,-0.11030139238909e-7,-0.81456365207833e-13,-0.25180545682962e-10,-0.17565233969407e-17,0.86934156344163e-14};
        double pp=p;
        double hh=h/2000;
        double T=0;
        int i;
        for(i=0;i<38;i++)
            T+=n_2b[i]*pow((pp-2),I_2b[i])*pow((hh-2.6),J_2b[i]);
        return T;
    }
    //c区ph

    double T_2cph(double p,double h)
    {
        double I_2c[23]={-7,-7,-6,-6,-5,-5,-2,-2,-1,-1,0,0,1,1,2,6,6,6,6,6,6,6,6};
        double J_2c[23]={0,4,0,2,0,2,0,1,0,2,0,1,4,8,4,0,1,4,10,12,16,20,22};
        double n_2c[23]={-0.32368398555242e13,0.73263350902181e13,0.35825089945447e12,-0.58340131851590e12,-0.10783068217470e11,0.20825544563171e11,0.61074783564516e6,0.85977722535580e6,-0.25745723604170e5,0.31081088422714e5,0.12082315865936e4,0.48219755109255e3,0.37966001272486e1,-0.10842984880077e2,-0.45364172676660e-1,0.14559115658698e-12,0.11261597407230e-11,-0.17804982240686e-10,0.12324579690832e-6,-0.11606921130984e-5,0.27846367088554e-4,-0.59270038474176e-3,0.12918582991878e-2};
        double pp=p;
        double hh=h/2000;
        double T=0;
        int i;
        for(i=0;i<23;i++)
            T+=n_2c[i]*pow((pp+25),I_2c[i])*pow((hh-1.8),J_2c[i]);
        return T;
    }
    //a区ps
    double T_2aps(double p,double s)
    {
        double I_2a[46]={-1.5, -1.5, -1.5, -1.5, -1.5, -1.5, -1.25, -1.25, -1.25, -1, -1, -1, -1, -1, -1, -0.75, -0.75, -0.5, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 1, 1, 1.25, 1.25, 1.5, 1.5};
        double J_2a[46]={-24, -23, -19, -13, -11, -10, -19, -15, -6, -26, -21, -17, -16, -9, -8, -15, -14, -26, -13, -9, -7, -27, -25, -11, -6, 1, 4, 8, 11, 0, 1, 5, 6, 10, 14, 16, 0, 4, 9, 17, 7, 18, 3, 15, 5, 18};
        double n_2a[46] = {-392359.83861984, 515265.7382727, 40482.443161048, -321.93790923902, 96.961424218694, -22.867846371773, -449429.14124357, -5011.8336020166, 0.35684463560015, 44235.33584819, -13673.388811708, 421632.60207864, 22516.925837475, 474.42144865646, -149.31130797647, -197811.26320452, -23554.39947076, -19070.616302076, 55375.669883164, 3829.3691437363, -603.91860580567, 1936.3102620331, 4266.064369861, -5978.0638872718, -704.01463926862, 338.36784107553, 20.862786635187, 0.033834172656196, -4.3124428414893E-05, 166.53791356412, -139.86292055898, -0.78849547999872, 0.072132411753872, -5.9754839398283E-03, -1.2141358953904E-05, 2.3227096733871E-07, -10.538463566194, 2.0718925496502, -0.072193155260427, 2.074988708112E-07, -0.018340657911379, 2.9036272348696E-07, 0.21037527893619, 2.5681239729999E-04, -0.012799002933781, -8.2198102652018E-06};
        double ss=s/2;
        double T=0;
        int i;
        for(i=0;i<46;i++)
            T+=n_2a[i]*pow(p,I_2a[i])*pow((ss-2),J_2a[i]);
        return T;
    }
    //b区ps
    double T_2bps(double p,double s)
    {
        double I_2b[44]={-6,-6,-5,-5,-4,-4,-4,-3,-3,-3,-3,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,4,4,5,5,5};
        double J_2b[44]={0,11,0,11,0,1,11,0,1,11,12,0,1,6,10,0,1,5,8,9,0,1,2,4,5,6,9,0,1,2,3,7,8,0,1,5,0,1,3,0,1,0,1,2};
        double n_2b[44]={316876.65083497,20.864175881858,-398593.99803599,-21.816058518877,223697.85194242,-2784.1703445817,9.920743607148,-75197.512299157,2970.8605951158,-3.4406878548526,0.38815564249115,17511.29508575,-1423.7112854449,1.0943803364167,0.89971619308495,-3375.9740098958,471.62885818355,-1.9188241993679,0.41078580492196,-0.33465378172097,1387.0034777505,-406.63326195838,41.72734715961,2.1932549434532,-1.0320050009077,0.35882943516703,5.2511453726066e-3,12.838916450705,-2.8642437219381,0.56912683664855,-0.099962954584931,-3.2632037778459e-3,2.3320922576723e-4,-0.1533480985745,0.029072288239902,3.7534702741167e-4,1.7296691702411e-3,-3.8556050844504e-4,-3.5017712292608e-5,-1.4566393631492e-5,5.6420857267269e-6,4.1286150074605e-8,-2.0684671118824e-8,1.6409393674725e-9};
        double ss=s/0.7853;
        double T=0;
        int i;
        for(i=0;i<44;i++)
            T+=n_2b[i]*pow(p,I_2b[i])*pow((10-ss),J_2b[i]);
        return T;
    }
    //c区ps
    double T_2cps(double p,double s)
    {
        double I_2c[30] = {-2, -2, -1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7};
        double J_2c[30]=  {0, 1, 0, 0, 1, 2, 3, 0, 1, 3, 4, 0, 1, 2, 0, 1, 5, 0, 1, 4, 0, 1, 2, 0, 1, 0, 1, 3, 4, 5};
        double n_2c[30] = {909.68501005365, 2404.566708842, -591.6232638713, 541.45404128074, -270.98308411192, 979.76525097926, -469.66772959435, 14.399274604723, -19.104204230429, 5.3299167111971, -21.252975375934, -0.3114733441376, 0.60334840894623, -0.042764839702509, 5.8185597255259E-03, -0.014597008284753, 5.6631175631027E-03, -7.6155864584577E-05, 2.2440342919332E-04, -1.2561095013413E-05, 6.3323132660934E-07, -2.0541989675375E-06, 3.6405370390082E-08, -2.9759897789215E-09, 1.0136618529763E-08, 5.9925719692351E-12, -2.0677870105164E-11, -2.0874278181886E-11, 1.0162166825089E-10, -1.6429828281347E-10};
        double ss=s/2.9251;
        double T=0;
        int i;
        for(i=0;i<30;i++)
            T+=n_2c[i]*pow(p,I_2c[i])*pow((2-ss),J_2c[i]);
        return T;
    }
    /////////////////////////////////
    //第三分区
    /////////////////////////////////
    //开始
    ///////////////////////////////////
    ///亥姆霍兹自由能
    ////////////////////////////////
    double him_3rhoT(double rho,double T)
    {
        double I_3[40]={0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11};
        double J_3[40]={0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17, 0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2, 26, 2, 26, 2, 26, 0, 1, 26};
        double n_3[40]={1.0658070028513, -15.732845290239, 20.944396974307, -7.6867707878716, 2.6185947787954, -2.808078114862, 1.2053369696517, -8.4566812812502E-03, -1.2654315477714, -1.1524407806681, 0.88521043984318, -0.64207765181607, 0.38493460186671, -0.85214708824206, 4.8972281541877, -3.0502617256965, 0.039420536879154, 0.12558408424308, -0.2799932969871, 1.389979956946, -2.018991502357, -8.2147637173963E-03, -0.47596035734923, 0.0439840744735, -0.44476435428739, 0.90572070719733, 0.70522450087967, 0.10770512626332, -0.32913623258954, -0.50871062041158, -0.022175400873096, 0.094260751665092, 0.16436278447961, -0.013503372241348, -0.014834345352472, 5.7922953628084E-04, 3.2308904703711E-03, 8.0964802996215E-05, -1.6557679795037E-04, -4.4923899061815E-05};
        double rr=rho/322;
        double tt=647.096/T;
        double h=n_3[0]*log(rr);
        int i;
        for(i=1;i<40;i++)
            h+=n_3[i]*pow(rr,I_3[i])*pow(tt,J_3[i]);
        return h;
    }
    ///////////////////////////////////////
    ////////
    ///关于rr(rho)的导数
    double him_3rho(double rho,double T)
    {
        double I_3[40]={0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11};
        double J_3[40]={0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17, 0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2, 26, 2, 26, 2, 26, 0, 1, 26};
        double n_3[40]={1.0658070028513, -15.732845290239, 20.944396974307, -7.6867707878716, 2.6185947787954, -2.808078114862, 1.2053369696517, -8.4566812812502E-03, -1.2654315477714, -1.1524407806681, 0.88521043984318, -0.64207765181607, 0.38493460186671, -0.85214708824206, 4.8972281541877, -3.0502617256965, 0.039420536879154, 0.12558408424308, -0.2799932969871, 1.389979956946, -2.018991502357, -8.2147637173963E-03, -0.47596035734923, 0.0439840744735, -0.44476435428739, 0.90572070719733, 0.70522450087967, 0.10770512626332, -0.32913623258954, -0.50871062041158, -0.022175400873096, 0.094260751665092, 0.16436278447961, -0.013503372241348, -0.014834345352472, 5.7922953628084E-04, 3.2308904703711E-03, 8.0964802996215E-05, -1.6557679795037E-04, -4.4923899061815E-05};
        double rr=rho/322;
        double tt=647.096/T;
        double hrho=n_3[0]/rr;
        int i;
        for(i=1;i<40;i++)
            hrho+=n_3[i]*I_3[i]*pow(rr,(I_3[i]-1))*pow(tt,J_3[i]);
        return hrho;
    }
    ///关于tt的导数
    double him_3t(double rho,double T)
    {
        double I_3[40]={0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11};
        double J_3[40]={0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17, 0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2, 26, 2, 26, 2, 26, 0, 1, 26};
        double n_3[40]={1.0658070028513, -15.732845290239, 20.944396974307, -7.6867707878716, 2.6185947787954, -2.808078114862, 1.2053369696517, -8.4566812812502E-03, -1.2654315477714, -1.1524407806681, 0.88521043984318, -0.64207765181607, 0.38493460186671, -0.85214708824206, 4.8972281541877, -3.0502617256965, 0.039420536879154, 0.12558408424308, -0.2799932969871, 1.389979956946, -2.018991502357, -8.2147637173963E-03, -0.47596035734923, 0.0439840744735, -0.44476435428739, 0.90572070719733, 0.70522450087967, 0.10770512626332, -0.32913623258954, -0.50871062041158, -0.022175400873096, 0.094260751665092, 0.16436278447961, -0.013503372241348, -0.014834345352472, 5.7922953628084E-04, 3.2308904703711E-03, 8.0964802996215E-05, -1.6557679795037E-04, -4.4923899061815E-05};
        double rr=rho/322;
        double tt=647.096/T;
        double ht=0;
        int i;
        for(i=1;i<40;i++)
            ht+=n_3[i]*J_3[i]*pow(rr,I_3[i])*pow(tt,(J_3[i]-1));
        return ht;
    }
    ///关于rr（rho）的二阶导数
    double him_3rhor(double rho,double T)
    {
        double I_3[40]={0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11};
        double J_3[40]={0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17, 0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2, 26, 2, 26, 2, 26, 0, 1, 26};
        double n_3[40]={1.0658070028513, -15.732845290239, 20.944396974307, -7.6867707878716, 2.6185947787954, -2.808078114862, 1.2053369696517, -8.4566812812502E-03, -1.2654315477714, -1.1524407806681, 0.88521043984318, -0.64207765181607, 0.38493460186671, -0.85214708824206, 4.8972281541877, -3.0502617256965, 0.039420536879154, 0.12558408424308, -0.2799932969871, 1.389979956946, -2.018991502357, -8.2147637173963E-03, -0.47596035734923, 0.0439840744735, -0.44476435428739, 0.90572070719733, 0.70522450087967, 0.10770512626332, -0.32913623258954, -0.50871062041158, -0.022175400873096, 0.094260751665092, 0.16436278447961, -0.013503372241348, -0.014834345352472, 5.7922953628084E-04, 3.2308904703711E-03, 8.0964802996215E-05, -1.6557679795037E-04, -4.4923899061815E-05};
        double rr=rho/322;
        double tt=647.096/T;
        double hrhor=-n_3[0]/rr/rr;
        int i;
        for(i=1;i<40;i++)
            hrhor+=n_3[i]*I_3[i]*(I_3[i]-1)*pow(rr,(I_3[i]-2))*pow(tt,J_3[i]);
        return hrhor;
    }
    ///关于tt的二阶导数
    double him_3tt(double rho,double T)
    {
        double I_3[40]={0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11};
        double J_3[40]={0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17, 0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2, 26, 2, 26, 2, 26, 0, 1, 26};
        double n_3[40]={1.0658070028513, -15.732845290239, 20.944396974307, -7.6867707878716, 2.6185947787954, -2.808078114862, 1.2053369696517, -8.4566812812502E-03, -1.2654315477714, -1.1524407806681, 0.88521043984318, -0.64207765181607, 0.38493460186671, -0.85214708824206, 4.8972281541877, -3.0502617256965, 0.039420536879154, 0.12558408424308, -0.2799932969871, 1.389979956946, -2.018991502357, -8.2147637173963E-03, -0.47596035734923, 0.0439840744735, -0.44476435428739, 0.90572070719733, 0.70522450087967, 0.10770512626332, -0.32913623258954, -0.50871062041158, -0.022175400873096, 0.094260751665092, 0.16436278447961, -0.013503372241348, -0.014834345352472, 5.7922953628084E-04, 3.2308904703711E-03, 8.0964802996215E-05, -1.6557679795037E-04, -4.4923899061815E-05};
        double rr=rho/322;
        double tt=647.096/T;
        double htt=0;
        int i;
        for(i=1;i<40;i++)
            htt+=n_3[i]*J_3[i]*(J_3[i]-1)*pow(rr,I_3[i])*pow(tt,(J_3[i]-2));
        return htt;
    }
    ///关于tt与rho的二阶导数
    double him_3rhot(double rho,double T)
    {
        double I_3[40]={0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11};
        double J_3[40]={0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17, 0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2, 26, 2, 26, 2, 26, 0, 1, 26};
        double n_3[40]={1.0658070028513, -15.732845290239, 20.944396974307, -7.6867707878716, 2.6185947787954, -2.808078114862, 1.2053369696517, -8.4566812812502E-03, -1.2654315477714, -1.1524407806681, 0.88521043984318, -0.64207765181607, 0.38493460186671, -0.85214708824206, 4.8972281541877, -3.0502617256965, 0.039420536879154, 0.12558408424308, -0.2799932969871, 1.389979956946, -2.018991502357, -8.2147637173963E-03, -0.47596035734923, 0.0439840744735, -0.44476435428739, 0.90572070719733, 0.70522450087967, 0.10770512626332, -0.32913623258954, -0.50871062041158, -0.022175400873096, 0.094260751665092, 0.16436278447961, -0.013503372241348, -0.014834345352472, 5.7922953628084E-04, 3.2308904703711E-03, 8.0964802996215E-05, -1.6557679795037E-04, -4.4923899061815E-05};
        double rr=rho/322;
        double tt=647.096/T;
        double hrhot=0;
        int i;
        for(i=1;i<40;i++)
            hrhot+=n_3[i]*J_3[i]*I_3[i]*pow(rr,(I_3[i]-1))*pow(tt,(J_3[i]-1));
        return hrhot;
    }
    /////////////////////////////////////
    ////水蒸气的各个参数******///////////
    /////////////////////////////////////
    ///压力的大小p
    double p_3rhoT(double rho,double T)
    {
        double rr=rho/322;
        double h3rho=him_3rho(rho,T);
        double prhoT=rho*R*T*rr*h3rho/1000;
        return prhoT;
    }
    //导数
    double p_3rho(double rho,double T)
    {
        double rr=rho/322;
        double h3rho=him_3rho(rho,T);
        double h3rhor=him_3rhor(rho,T);
        double p3r=644*rr*R*T*h3rho/1000+rr*322*R*T*rr*h3rhor/1000;
        return p3r;
    }
    double p_3t(double rho,double T)
    {
        double rr=rho/322;
        double tt=647.096/T;
        double h3rho=him_3rho(rho,T);
        double h3rhot=him_3rhot(rho,T);
        double p3t=-rho*R*647.096/tt/tt*rr*h3rho/1000+rho*R*647.096/tt*rr*h3rhot/1000;
        return p3t;
    }
    ///internal energyu
    double u_3rhoT(double rho,double T)
    {
        double tt=647.096/T;
        double h3t=him_3t(rho,T);
        double urhoT=R*T*tt*h3t;
        return urhoT;
    }
    ///Entropys
    double s_3rhoT(double rho,double T)
    {
        double tt=647.096/T;
        double h3t=him_3t(rho,T);
        double h3=him_3rhoT(rho,T);
        double srhoT=R*(tt*h3t-h3);
        return srhoT;
    }
    ///Enthalpyh
    double h_3rhoT(double rho,double T)
    {
        double tt=647.096/T;
        double rr=rho/322;
        double h3rho=him_3rho(rho,T);
        double h3t=him_3t(rho,T);
        double hrhoT=R*T*(tt*h3t+rr*h3rho);
        return hrhoT;
    }
    ///Cvcv
    double cv_3rhoT(double rho,double T)
    {
        double tt=647.096/T;
        double h3tt=him_3tt(rho,T);
        double cvrhoT=-R*tt*tt*h3tt;
        return cvrhoT;
    }
    ///Cpcp
    double cp_3rhoT(double rho,double T)
    {
        double tt=647.096/T;
        double rr=rho/322;
        double h3rho=him_3rho(rho,T);
        double h3rhot=him_3rhot(rho,T);
        double h3rhor=him_3rhor(rho,T);
        double h3tt=him_3tt(rho,T);
        double cprhoT=R*(-tt*tt*h3tt+pow((rr*h3rho-rr*tt*h3rhot),2)/(2*rr*h3rho+rr*rr*h3rhor));
        return cprhoT;
    }
    ///Sound speedw
    double w_3rhoT(double rho,double T)
    {
        double tt=647.096/T;
        double rr=rho/322;
        double h3rho=him_3rho(rho,T);
        double h3rhot=him_3rhot(rho,T);
        double h3rhor=him_3rhor(rho,T);
        double h3tt=him_3tt(rho,T);
        double wrhoT=sqrt(1000*R*T*(2*rr*h3rho+rr*rr*h3rhor-pow((rr*h3rho-rr*tt*h3rhot),2)/(tt*tt*h3tt)));
        return wrhoT;
    }
    /////////////////////////////
    ///THE END//////////////////
    ////////////////
    ///Equation (28) covers region 3 of IAPWS-IF97 defined by the following range of
    ///temperature and pressure, see Fig. 1:
    ////623.15 K ≤ T ≤ T ( p )Eq.(6) p ( T )Eq.(5) ≤ p ≤ 100 MPa .
    ///?????????????


    ///?????????????
    /////////////////////////////
    ////第四区域的函数设计///////
    ////饱和区的
    ////压力ps
    double p_4T(double T)
    {
        double n_4[10]={0.11670521452767e4,-0.72421316703206e6,-0.17073846940092e2,0.12020824702470e5,-0.32325550322333e7,0.14915108613530e2,-0.48232657361591e4,0.40511340542057e6,-0.23855557567849,0.65017534844798e3};
        double thAt=T+n_4[8]/(T-n_4[9]);
        double A=thAt*thAt+n_4[0]*thAt+n_4[1];
        double B=n_4[2]*thAt*thAt+n_4[3]*thAt+n_4[4];
        double C=n_4[5]*thAt*thAt+n_4[6]*thAt+n_4[7];
        double p=pow((2*C/(-B+sqrt(B*B-4*A*C))),4);
        return p;
    }
    ///Equation (30) is valid along the entire vapor-liquid saturation line from the triple-point
    ///temperature Tt to the critical temperature Tc and can be simply extrapolated to 273.15 K so
    ///that it covers the temperature range
    ////273.15 K ≤ T ≤ 647.096 K .
    ////反推公式
    ////温度T
    double T_4p(double p)
    {
        double n_4[10]={0.11670521452767e4,-0.72421316703206e6,-0.17073846940092e2,0.12020824702470e5,-0.32325550322333e7,0.14915108613530e2,-0.48232657361591e4,0.40511340542057e6,-0.23855557567849,0.65017534844798e3};
        double bAt=sqrt(sqrt(p));
        double E=bAt*bAt+n_4[2]*bAt+n_4[5];
        double F=n_4[0]*bAt*bAt+n_4[3]*bAt+n_4[6];
        double G=n_4[1]*bAt*bAt+n_4[4]*bAt+n_4[7];
        double D=2*G/(-F-sqrt(F*F-4*E*G));
        double T=(n_4[9]+D-sqrt(pow((n_4[9]+D),2)-4*(n_4[8]+n_4[9]*D)))/2;
        return T;
    }
    ////Equation (31) has the same range of validity as Eq. (30), which means that it covers the
    ///vapor-liquid saturation line according to the pressure range
    ///611.213 Pa ≤ p ≤ 22.064 MPa .
    ///The value of 611.213 Pa corresponds to the pressure when Eq. (31) is extrapolated to 273.15 K.
    //////////////////////////////////////
    //////区域五的基本方程////////////////
    //////////////////////////////////////
    ////吉布斯自由能
    ////理想气体部分
    double go_5pT(double p,double T)
    {
        double pp=p;
        double tt=1000/T;
        double J_5[6]={0, 1, -3, -2, -1, 2};
        double n_5[6]={-13.179983674201, 6.8540841634434, -0.024805148933466, 0.36901534980333, -3.1161318213925, -0.32961626538917};
        double go=log(pp);
        int i;
        for(i=0;i<6;i++)
            go+=n_5[i]*pow(tt,J_5[i]);
        return go;
    }
    ////关于pp的导数
    double go_5p(double p,double T)
    {
        double pp=p;
        return 1/pp;
    }
    ////关于pp的二阶导数
    double go_5pp(double p,double T)
    {
        double pp=p;
        return -1/pp/pp;
    }
    ////关于tt的导数
    double go_5t(double p,double T)
    {
        double tt=1000/T;
        double J_5[6]={0, 1, -3, -2, -1, 2};
        double n_5[6]={-13.179983674201, 6.8540841634434, -0.024805148933466, 0.36901534980333, -3.1161318213925, -0.32961626538917};
        double go5t=0;
        int i;
        for(i=0;i<6;i++)
            go5t+=n_5[i]*J_5[i]*pow(tt,(J_5[i]-1));
        return go5t;
    }
    /////关于tt的二阶导数
    double go_5tt(double p,double T)
    {
        double tt=1000/T;
        double J_5[6]={0, 1, -3, -2, -1, 2};
        double n_5[6]={-13.179983674201, 6.8540841634434, -0.024805148933466, 0.36901534980333, -3.1161318213925, -0.32961626538917};
        double go5t=0;
        int i;
        for(i=0;i<6;i++)
            go5t+=n_5[i]*J_5[i]*(J_5[i]-1)*pow(tt,(J_5[i]-2));
        return go5t;
    }
    /////关于tt与pp的导数
    double go_5pt(double p,double T)
    {
        return 0;
    }

    /////保留部分
    double gr_5pT(double p,double T)
    {
        double I_5[6]={1, 1, 1, 2, 2, 3};
        double J_5[6]={1, 2, 3, 3, 9, 7};
        double n_5[6]={0.15736404855259e-2,0.90153761673944e-3,-0.50270077677648e-2,0.22440037409485e-5,-0.41163275453471e-5,0.37919454822955e-7};
        double pp=p;
        double tt=1000/T;
        double gr=0;
        int i;
        for(i=0;i<6;i++)
            gr+=n_5[i]*pow(pp,I_5[i])*pow(tt,J_5[i]);
        return gr;
    }
    //////关于pp的导数
    double gr_5p(double p,double T)
    {
        double I_5[6]={1, 1, 1, 2, 2, 3};
        double J_5[6]={1, 2, 3, 3, 9, 7};
        double n_5[6]={0.15736404855259e-2,0.90153761673944e-3,-0.50270077677648e-2,0.22440037409485e-5,-0.41163275453471e-5,0.37919454822955e-7};
        double pp=p;
        double tt=1000/T;
        double gr5p=0;
        int i;
        for(i=0;i<6;i++)
            gr5p+=n_5[i]*I_5[i]*pow(pp,(I_5[i]-1))*pow(tt,J_5[i]);
        return gr5p;
    }
    ///////关于tt的导数
    double gr_5t(double p,double T)
    {
        double I_5[6]={1, 1, 1, 2, 2, 3};
        double J_5[6]={1, 2, 3, 3, 9, 7};
        double n_5[6]={0.15736404855259e-2,0.90153761673944e-3,-0.50270077677648e-2,0.22440037409485e-5,-0.41163275453471e-5,0.37919454822955e-7};
        double pp=p;
        double tt=1000/T;
        double gr5t=0;
        int i;
        for(i=0;i<6;i++)
            gr5t+=n_5[i]*J_5[i]*pow(pp,I_5[i])*pow(tt,(J_5[i]-1));
        return gr5t;
    }
    ////关于pp的二阶导数
    double gr_5pp(double p,double T)
    {
        double I_5[6]={1, 1, 1, 2, 2, 3};
        double J_5[6]={1, 2, 3, 3, 9, 7};
        double n_5[6]={0.15736404855259e-2,0.90153761673944e-3,-0.50270077677648e-2,0.22440037409485e-5,-0.41163275453471e-5,0.37919454822955e-7};
        double pp=p;
        double tt=1000/T;
        double gr5pp=0;
        int i;
        for(i=0;i<6;i++)
            gr5pp+=n_5[i]*I_5[i]*(I_5[i]-1)*pow(pp,(I_5[i]-2))*pow(tt,J_5[i]);
        return gr5pp;
    }
    ///关于tt的二阶导数
    double gr_5tt(double p,double T)
    {
        double I_5[6]={1, 1, 1, 2, 2, 3};
        double J_5[6]={1, 2, 3, 3, 9, 7};
        double n_5[6]={0.15736404855259e-2,0.90153761673944e-3,-0.50270077677648e-2,0.22440037409485e-5,-0.41163275453471e-5,0.37919454822955e-7};
        double pp=p;
        double tt=1000/T;
        double gr5tt=0;
        int i;
        for(i=0;i<6;i++)
            gr5tt+=n_5[i]*J_5[i]*(J_5[i]-1)*pow(pp,I_5[i])*pow(tt,(J_5[i]-2));
        return gr5tt;
    }
    /////关于pp与tt的导数
    double gr_5pt(double p,double T)
    {
        double I_5[6]={1, 1, 1, 2, 2, 3};
        double J_5[6]={1, 2, 3, 3, 9, 7};
        double n_5[6]={0.15736404855259e-2,0.90153761673944e-3,-0.50270077677648e-2,0.22440037409485e-5,-0.41163275453471e-5,0.37919454822955e-7};
        double pp=p;
        double tt=1000/T;
        double gr5pt=0;
        int i;
        for(i=0;i<6;i++)
            gr5pt+=n_5[i]*I_5[i]*J_5[i]*pow(pp,(I_5[i]-1))*pow(tt,(J_5[i]-1));
        return gr5pt;
    }
    /////////////////////////////
    /////各个参数的求取
    ////////////////////////////
    /////比容v
    double v_5pT(double p,double T)
    {
        double pp=p;
        double go5p=go_5p(p,T);
        double gr5p=gr_5p(p,T);
        double v=R*T*pp/p*(go5p+gr5p)/1000;
        return v;
    }
    //导数
    double v_5p(double p,double T)
    {
        double pp=p;

        double go5pp=go_5pp(p,T);
        double gr5pp=gr_5pp(p,T);
        double v5p=R*T*pp/p*(go5pp+gr5pp)/1000;
        return v5p;
    }
    double v_5t(double p,double T)
    {
        double pp=p;
        double tt=1000/T;
        double go5pt=go_5pt(p,T);
        double gr5pt=gr_5pt(p,T);
        double go5p=go_5p(p,T);
        double gr5p=gr_5p(p,T);
        double v5p=-R*1000/tt/tt*pp/p*(go5p+gr5p)/1000+R*1000/tt*pp/p*(go5pt+gr5pt)/1000;
        return v5p;
    }
    /////internal energyu
    double u_5pT(double p,double T)
    {
        double pp=p;
        double tt=1000/T;
        double go5p=go_5p(p,T);
        double gr5p=gr_5p(p,T);
        double go5t=go_5t(p,T);
        double gr5t=gr_5t(p,T);
        double u=R*T*(tt*(go5t+gr5t)-pp*(go5p+gr5p));
        return u;
    }
    ////Entropys
    double s_5pT(double p,double T)
    {
        double tt=1000/T;
        double go5=go_5pT(p,T);
        double gr5=gr_5pT(p,T);
        double go5t=go_5t(p,T);
        double gr5t=gr_5t(p,T);
        double s=R*(tt*(go5t+gr5t)-(go5+gr5));
        return s;
    }
    /////Enthalpyh
    double h_5pT(double p,double T)
    {
        double tt=1000/T;
        double go5t=go_5t(p,T);
        double gr5t=gr_5t(p,T);
        double h=R*T*tt*(go5t+gr5t);
        return h;
    }
    //////Cpcp
    double cp_5pT(double p,double T)
    {
        double tt=1000/T;
        double go5tt=go_5tt(p,T);
        double gr5tt=gr_5tt(p,T);
        double cp=-R*tt*tt*(go5tt+gr5tt);
        return cp;
    }
    //////Cvcv
    double cv_5pT(double p,double T)
    {
        double pp=p;
        double tt=1000/T;
        double gr5pp=gr_5pp(p,T);
        double gr5p=gr_5p(p,T);
        double go5tt=go_5tt(p,T);
        double gr5tt=gr_5tt(p,T);
        double gr5pt=gr_5pt(p,T);
        double cv=R*(-tt*tt*(gr5tt+go5tt)-pow((1+pp*gr5p-pp*tt*gr5pt),2)/(1-pp*pp*gr5pp));
        return cv;
    }
    ////////Sound speedw
    double w_5pT(double p,double T)
    {
        double pp=p;
        double tt=1000/T;
        double gr5pp=gr_5pp(p,T);
        double gr5p=gr_5p(p,T);
        double go5tt=go_5tt(p,T);
        double gr5tt=gr_5tt(p,T);
        double gr5pt=gr_5pt(p,T);
        double w=sqrt(1000*R*T*(1+2*pp*gr5p+pp*pp*gr5p*gr5p)/(1-pp*pp*gr5pp+pow((1+pp*gr5p-pp*tt*gr5pt),2)/(tt*tt*(gr5tt+go5tt))));
        return w;
    }
    ////////////////////////////////
    ///////THE END OF THE BASIC EQUS
    ////////////////////////////////
    ///The equation set consists of backward equations T ( p, h) , v ( p, h) and T ( p, s), v ( p, s) for
    ///region 3.
    ///Region 3 is defined by:
    ///623.15 K ￡ T ￡ 863.15 K and 97 ( )
    ///pB23 T ￡ p ￡ 100 MPa ,
    /////////////////////////////////////////////
    ///4.412 021 482 234 76 kJ kg K s = - - ,等熵线；
    ///3区的反推以该等熵线分为ab两区
    double h_3abp(double p)
    {
        double n_3[4]={0.201464004206875e4,0.374696550136983e1,-0.219921901054187e-1,0.875131686009950e-4}; 
        double hp=0;
        int i;
        for(i=0;i<4;i++)
            hp+=n_3[i]*pow(p,i);
        return hp;
    }
    ////ph为参数是反推
    ///a区的温度反推公式
    double T_3aph(double p,double h)
    {
        double hh=h/2300;
        double pp=p/100;
        double I_3a[31]={-12, -12, -12, -12, -12, -12, -12, -12, -10, -10, -10, -8, -8, -8, -8, -5, -3, -2, -2, -2, -1, -1, 0, 0, 1, 3, 3, 4, 4, 10, 12};
        double J_3a[31]={0, 1, 2, 6, 14, 16, 20, 22, 1, 5, 12, 0, 2, 4, 10, 2, 0, 1, 3, 4, 0, 2, 0, 1, 1, 0, 1, 0, 3, 4, 5};
        double n_3a[31]={-1.33645667811215E-07, 4.55912656802978E-06, -1.46294640700979E-05, 6.3934131297008E-03, 372.783927268847, -7186.54377460447, 573494.7521034, -2675693.29111439, -3.34066283302614E-05, -2.45479214069597E-02, 47.8087847764996, 7.64664131818904E-06, 1.28350627676972E-03, 1.71219081377331E-02, -8.51007304583213, -1.36513461629781E-02, -3.84460997596657E-06, 3.37423807911655E-03, -0.551624873066791, 0.72920227710747, -9.92522757376041E-03, -0.119308831407288, 0.793929190615421, 0.454270731799386, 0.20999859125991, -6.42109823904738E-03, -0.023515586860454, 2.52233108341612E-03, -7.64885133368119E-03, 1.36176427574291E-02, -1.33027883575669E-02};
        double T=0;
        int i;
        for(i=0;i<31;i++)
            T+=n_3a[i]*pow((pp+0.240),I_3a[i])*pow((hh-0.615),J_3a[i]);
        T*=760;
        return T;
    }
    ////关于hh求导
    double T_3aph_h(double p,double h)
    {
        double hh=h/2300;
        double pp=p/100;
        double I_3a[31]={-12, -12, -12, -12, -12, -12, -12, -12, -10, -10, -10, -8, -8, -8, -8, -5, -3, -2, -2, -2, -1, -1, 0, 0, 1, 3, 3, 4, 4, 10, 12};
        double J_3a[31]={0, 1, 2, 6, 14, 16, 20, 22, 1, 5, 12, 0, 2, 4, 10, 2, 0, 1, 3, 4, 0, 2, 0, 1, 1, 0, 1, 0, 3, 4, 5};
        double n_3a[31]={-1.33645667811215E-07, 4.55912656802978E-06, -1.46294640700979E-05, 6.3934131297008E-03, 372.783927268847, -7186.54377460447, 573494.7521034, -2675693.29111439, -3.34066283302614E-05, -2.45479214069597E-02, 47.8087847764996, 7.64664131818904E-06, 1.28350627676972E-03, 1.71219081377331E-02, -8.51007304583213, -1.36513461629781E-02, -3.84460997596657E-06, 3.37423807911655E-03, -0.551624873066791, 0.72920227710747, -9.92522757376041E-03, -0.119308831407288, 0.793929190615421, 0.454270731799386, 0.20999859125991, -6.42109823904738E-03, -0.023515586860454, 2.52233108341612E-03, -7.64885133368119E-03, 1.36176427574291E-02, -1.33027883575669E-02};
        double Th=0;
        int i;
        for(i=0;i<31;i++)
            Th+=n_3a[i]*J_3a[i]*pow((pp+0.240),I_3a[i])*pow((hh-0.615),(J_3a[i]-1));
        Th*=760;
        return Th;
    }
    ///b区的温度反推公式
    double T_3bph(double p,double h)
    {
        double hh=h/2800;
        double pp=p/100;
        double I_3b[33]={-12, -12, -10, -10, -10, -10, -10, -8, -8, -8, -8, -8, -6, -6, -6, -4, -4, -3, -2, -2, -1, -1, -1, -1, -1, -1, 0, 0, 1, 3, 5, 6, 8};
        double J_3b[33]={0, 1, 0, 1, 5, 10, 12, 0, 1, 2, 4, 10, 0, 1, 2, 0, 1, 5, 0, 4, 2, 4, 6, 10, 14, 16, 0, 2, 1, 1, 1, 1, 1};
        double n_3b[33]={3.2325457364492E-05, -1.27575556587181E-04, -4.75851877356068E-04, 1.56183014181602E-03, 0.105724860113781, -85.8514221132534, 724.140095480911, 2.96475810273257E-03, -5.92721983365988E-03, -1.26305422818666E-02, -0.115716196364853, 84.9000969739595, -1.08602260086615E-02, 1.54304475328851E-02, 7.50455441524466E-02, 2.52520973612982E-02, -6.02507901232996E-02, -3.07622221350501, -5.74011959864879E-02, 5.03471360939849, -0.925081888584834, 3.91733882917546, -77.314600713019, 9493.08762098587, -1410437.19679409, 8491662.30819026, 0.861095729446704, 0.32334644281172, 0.873281936020439, -0.436653048526683, 0.286596714529479, -0.131778331276228, 6.76682064330275E-03};
        double T=0;
        int i;
        for(i=0;i<33;i++)
            T+=n_3b[i]*pow((pp+0.298),I_3b[i])*pow((hh-0.720),J_3b[i]);
        T*=860;
        return T;
    }
    //关于hh求导
    double T_3bph_h(double p,double h)
    {
        double hh=h/2800;
        double pp=p/100;
        double I_3b[33]={-12, -12, -10, -10, -10, -10, -10, -8, -8, -8, -8, -8, -6, -6, -6, -4, -4, -3, -2, -2, -1, -1, -1, -1, -1, -1, 0, 0, 1, 3, 5, 6, 8};
        double J_3b[33]={0, 1, 0, 1, 5, 10, 12, 0, 1, 2, 4, 10, 0, 1, 2, 0, 1, 5, 0, 4, 2, 4, 6, 10, 14, 16, 0, 2, 1, 1, 1, 1, 1};
        double n_3b[33]={3.2325457364492E-05, -1.27575556587181E-04, -4.75851877356068E-04, 1.56183014181602E-03, 0.105724860113781, -85.8514221132534, 724.140095480911, 2.96475810273257E-03, -5.92721983365988E-03, -1.26305422818666E-02, -0.115716196364853, 84.9000969739595, -1.08602260086615E-02, 1.54304475328851E-02, 7.50455441524466E-02, 2.52520973612982E-02, -6.02507901232996E-02, -3.07622221350501, -5.74011959864879E-02, 5.03471360939849, -0.925081888584834, 3.91733882917546, -77.314600713019, 9493.08762098587, -1410437.19679409, 8491662.30819026, 0.861095729446704, 0.32334644281172, 0.873281936020439, -0.436653048526683, 0.286596714529479, -0.131778331276228, 6.76682064330275E-03};
        double Th=0;
        int i;
        for(i=0;i<33;i++)
            Th+=n_3b[i]*J_3b[i]*pow((pp+0.298),I_3b[i])*pow((hh-0.720),(J_3b[i]-1));
        Th*=860;
        return Th;
    }
    ///a区的比容反推式
    double v_3aph(double p,double h)
    {
        double hh=h/2100;
        double pp=p/100;
        double I_3a[32]={-12, -12, -12, -12, -10, -10, -10, -8, -8, -6, -6, -6, -4, -4, -3, -2, -2, -1, -1, -1, -1, 0, 0, 1, 1, 1, 2, 2, 3, 4, 5, 8};
        double J_3a[32]={6, 8, 12, 18, 4, 7, 10, 5, 12, 3, 4, 22, 2, 3, 7, 3, 16, 0, 1, 2, 3, 0, 1, 0, 1, 2, 0, 2, 0, 2, 2, 2};
        double n_3a[32]={5.29944062966028E-03, -0.170099690234461, 11.1323814312927, -2178.98123145125, -5.06061827980875E-04, 0.556495239685324, -9.43672726094016, -0.297856807561527, 93.9353943717186, 1.92944939465981E-02, 0.421740664704763, -3689141.2628233, -7.37566847600639E-03, -0.354753242424366, -1.99768169338727, 1.15456297059049, 5683.6687581596, 8.08169540124668E-03, 0.172416341519307, 1.04270175292927, -0.297691372792847, 0.560394465163593, 0.275234661176914, -0.148347894866012, -6.51142513478515E-02, -2.92468715386302, 6.64876096952665E-02, 3.52335014263844, -1.46340792313332E-02, -2.24503486668184, 1.10533464706142, -4.08757344495612E-02};
        double v=0;
        int i;
        for(i=0;i<32;i++)
            v+=n_3a[i]*pow((pp+0.128),I_3a[i])*pow((hh-0.727),J_3a[i]);
        v*=0.0028;
        return v;
    }
    ///b区的比容反推公式
    double v_3bph(double p,double h)
    {
        double hh=h/2800;
        double pp=p/100;
        double I_3b[30]={-12, -12, -8, -8, -8, -8, -8, -8, -6, -6, -6, -6, -6, -6, -4, -4, -4, -3, -3, -2, -2, -1, -1, -1, -1, 0, 1, 1, 2, 2};
        double J_3b[30]={0, 1, 0, 1, 3, 6, 7, 8, 0, 1, 2, 5, 6, 10, 3, 6, 10, 0, 2, 1, 2, 0, 1, 4, 5, 0, 0, 1, 2, 6};
        double n_3b[30]={-2.25196934336318E-09, 1.40674363313486E-08, 2.3378408528056E-06, -3.31833715229001E-05, 1.07956778514318E-03, -0.271382067378863, 1.07202262490333, -0.853821329075382, -2.15214194340526E-05, 7.6965608822273E-04, -4.31136580433864E-03, 0.453342167309331, -0.507749535873652, -100.475154528389, -0.219201924648793, -3.21087965668917, 607.567815637771, 5.57686450685932E-04, 0.18749904002955, 9.05368030448107E-03, 0.285417173048685, 3.29924030996098E-02, 0.239897419685483, 4.82754995951394, -11.8035753702231, 0.169490044091791, -1.79967222507787E-02, 3.71810116332674E-02, -5.36288335065096E-02, 1.6069710109252};
        double v=0;
        int i;
        for(i=0;i<30;i++)
            v+=n_3b[i]*pow((pp+0.0661),I_3b[i])*pow((hh-0.720),J_3b[i]);
        v*=0.0088;
        return v;
    }
    ////ps为参数时反推
    ///a区的温度反推公式
    double T_3aps(double p,double s)
    {
        double ss=s/4.4;
        double pp=p/100;
        double I_3a[33]={-12, -12, -10, -10, -10, -10, -8, -8, -8, -8, -6, -6, -6, -5, -5, -5, -4, -4, -4, -2, -2, -1, -1, 0, 0, 0, 1, 2, 2, 3, 8, 8, 10};
        double J_3a[33]={28, 32, 4, 10, 12, 14, 5, 7, 8, 28, 2, 6, 32, 0, 14, 32, 6, 10, 36, 1, 4, 1, 6, 0, 1, 4, 0, 0, 3, 2, 0, 1, 2};
        double n_3a[33]={1500420082.63875, -159397258480.424, 5.02181140217975E-04, -67.2057767855466, 1450.58545404456, -8238.8953488889, -0.154852214233853, 11.2305046746695, -29.7000213482822, 43856513263.5495, 1.37837838635464E-03, -2.97478527157462, 9717779473494.13, -5.71527767052398E-05, 28830.794977842, -74442828926270.3, 12.8017324848921, -368.275545889071, 6.64768904779177E+15, 0.044935925195888, -4.22897836099655, -0.240614376434179, -4.74341365254924, 0.72409399912611, 0.923874349695897, 3.99043655281015, 3.84066651868009E-02, -3.59344365571848E-03, -0.735196448821653, 0.188367048396131, 1.41064266818704E-04, -2.57418501496337E-03, 1.23220024851555E-03};
        double T=0;
        int i;
        for(i=0;i<33;i++)
            T+=n_3a[i]*pow((pp+0.240),I_3a[i])*pow((ss-0.703),J_3a[i]);
        T*=760;
        return T;
    }
    ///b区的温度反推公式
    double T_3bps(double p,double s)
    {
        double ss=s/5.3;
        double pp=p/100;
        double I_3b[28]={-12, -12, -12, -12, -8, -8, -8, -6, -6, -6, -5, -5, -5, -5, -5, -4, -3, -3, -2, 0, 2, 3, 4, 5, 6, 8, 12, 14};
        double J_3b[28]={1, 3, 4, 7, 0, 1, 3, 0, 2, 4, 0, 1, 2, 4, 6, 12, 1, 6, 2, 0, 1, 1, 0, 24, 0, 3, 1, 2};
        double n_3b[28]={0.52711170160166, -40.1317830052742, 153.020073134484, -2247.99398218827, -0.193993484669048, -1.40467557893768, 42.6799878114024, 0.752810643416743, 22.6657238616417, -622.873556909932, -0.660823667935396, 0.841267087271658, -25.3717501764397, 485.708963532948, 880.531517490555, 2650155.92794626, -0.359287150025783, -656.991567673753, 2.41768149185367, 0.856873461222588, 0.655143675313458, -0.213535213206406, 5.62974957606348E-03, -316955725450471, -6.99997000152457E-04, 1.19845803210767E-02, 1.93848122022095E-05, -2.15095749182309E-05};
        double T=0;
        int i;
        for(i=0;i<28;i++)
            T+=n_3b[i]*pow((pp+0.760),I_3b[i])*pow((ss-0.818),J_3b[i]);
        T*=860;
        return T;
    }
    ///a区的比容反推式
    double v_3aps(double p,double s)
    {
        double ss=s/4.4;
        double pp=p/100;
        double I_3a[28]={-12, -12, -12, -10, -10, -10, -10, -8, -8, -8, -8, -6, -5, -4, -3, -3, -2, -2, -1, -1, 0, 0, 0, 1, 2, 4, 5, 6};
        double J_3a[28]={10, 12, 14, 4, 8, 10, 20, 5, 6, 14, 16, 28, 1, 5, 2, 4, 3, 8, 1, 2, 0, 1, 3, 0, 0, 2, 2, 0};
        double n_3a[28]={79.5544074093975, -2382.6124298459, 17681.3100617787, -1.10524727080379E-03, -15.3213833655326, 297.544599376982, -35031520.6871242, 0.277513761062119, -0.523964271036888, -148011.182995403, 1600148.99374266, 1708023226634.27, 2.46866996006494E-04, 1.6532608479798, -0.118008384666987, 2.537986423559, 0.965127704669424, -28.2172420532826, 0.203224612353823, 1.10648186063513, 0.52612794845128, 0.277000018736321, 1.08153340501132, -7.44127885357893E-02, 1.64094443541384E-02, -6.80468275301065E-02, 0.025798857610164, -1.45749861944416E-04};
        double v=0;
        int i;
        for(i=0;i<28;i++)
            v+=n_3a[i]*pow((pp+0.187),I_3a[i])*pow((ss-0.755),J_3a[i]);
        v*=0.0028;
        return v;
    }
    ///b区的比容反推公式
    double v_3bps(double p,double s)
    {
        double ss=s/5.3;
        double pp=p/100;
        double I_3b[31]={-12, -12, -12, -12, -12, -12, -10, -10, -10, -10, -8, -5, -5, -5, -4, -4, -4, -4, -3, -2, -2, -2, -2, -2, -2, 0, 0, 0, 1, 1, 2};
        double J_3b[31]={0, 1, 2, 3, 5, 6, 0, 1, 2, 4, 0, 1, 2, 3, 0, 1, 2, 3, 1, 0, 1, 2, 3, 4, 12, 0, 1, 2, 0, 2, 2};
        double n_3b[31]={5.91599780322238E-05, -1.85465997137856E-03, 1.04190510480013E-02, 5.9864730203859E-03, -0.771391189901699, 1.72549765557036, -4.67076079846526E-04, 1.34533823384439E-02, -8.08094336805495E-02, 0.508139374365767, 1.28584643361683E-03, -1.63899353915435, 5.86938199318063, -2.92466667918613, -6.14076301499537E-03, 5.76199014049172, -12.1613320606788, 1.67637540957944, -7.44135838773463, 3.78168091437659E-02, 4.01432203027688, 16.0279837479185, 3.17848779347728, -3.58362310304853, -1159952.60446827, 0.199256573577909, -0.122270624794624, -19.1449143716586, -1.50448002905284E-02, 14.6407900162154, -3.2747778718823};
        double v=0;
        int i;
        for(i=0;i<31;i++)
            v+=n_3b[i]*pow((pp+0.298),I_3b[i])*pow((ss-0.816),J_3b[i]);
        v*=0.0088;
        return v;
    }
    /////Region 2 is defined by:611.213 Pa ≤ p < psat (T) for 273.15 K ≤ T ≤ 623.15 K
    ///611.213 Pa ≤ p ≤ pB23(T) for 623.15 K < T ≤ 863.15 K
    ///611.213 Pa ≤ p ≤ 100MPa for 863.15 K < T ≤ 1073.15 K
    ///where 97 ( )
    ////pB23 T represents the B23-equation of IAPWS-IF97. This equation roughly describes
    ////an isentropic line; the entropy values along this line are between s = 5.047 kJ kg.1 K.1 and
    ////s = 5.261 kJ kg.1 K.1.
    ////1区的反推方程
    //hs为参数
    ///压力p的计算
    double p_1hs(double h,double s)
    {
        double hh=h/3400;
        double ss=s/7.6;
        double I_1[19]={0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5};
        double J_1[19]={0, 1, 2, 4, 5, 6, 8, 14, 0, 1, 4, 6, 0, 1, 10, 4, 1, 4, 0};
        double n_1[19]={-0.691997014660582, -18.361254878756, -9.28332409297335, 65.9639569909906, -16.2060388912024, 450.620017338667, 854.68067822417, 6075.23214001162, 32.6487682621856, -26.9408844582931, -319.9478483343, -928.35430704332, 30.3634537455249, -65.0540422444146, -4309.9131651613, -747.512324096068, 730.000345529245, 1142.84032569021, -436.407041874559};
        double p1hs=0;
        int i;
        for(i=0;i<19;i++)
            p1hs+=n_1[i]*pow((hh+0.05),I_1[i])*pow((ss+0.05),J_1[i]);
        p1hs*=100;
        return p1hs;
    }
    ////hs为参数2区的反推方程
    ///压力p的计算,其共分为abc三个分区
    ///首先讨论ab分区线方程
    double h_2abs(double s)
    {
        double ss=s;
        double n_2ab[4]={-0.349898083432139e4,0.257560716905876e4,-0.421073558227969e3,0.276349063799944e2};
        double h=0;
        int i;
        for(i=0;i<4;i++)
            h+=n_2ab[i]*pow(ss,i);
        return h;
    }
    ///a区的反推公式
    double p_2ahs(double h,double s)
    {
        double hh=h/4200;
        double ss=s/12;
        double I_1[29]={0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 6, 7};
        double J_1[29]={1, 3, 6, 16, 20, 22, 0, 1, 2, 3, 5, 6, 10, 16, 20, 22, 3, 16, 20, 0, 2, 3, 6, 16, 16, 3, 16, 3, 1};
        double n_1[29]={-1.82575361923032E-02, -0.125229548799536, 0.592290437320145, 6.04769706185122, 238.624965444474, -298.639090222922, 0.051225081304075, -0.437266515606486, 0.413336902999504, -5.16468254574773, -5.57014838445711, 12.8555037824478, 11.414410895329, -119.504225652714, -2847.7798596156, 4317.57846408006, 1.1289404080265, 1974.09186206319, 1516.12444706087, 1.41324451421235E-02, 0.585501282219601, -2.97258075863012, 5.94567314847319, -6236.56565798905, 9659.86235133332, 6.81500934948134, -6332.07286824489, -5.5891922446576, 4.00645798472063E-02};
        double p2ahs=0;
        int i;
        for(i=0;i<29;i++)
            p2ahs+=n_1[i]*pow((hh-0.5),I_1[i])*pow((ss-1.2),J_1[i]);
        p2ahs=pow(p2ahs,4);
        p2ahs*=4;
        return p2ahs;
    }
    ///b区的反推公式
    double p_2bhs(double h,double s)
    {
        double hh=h/4100;
        double ss=s/7.9;
        double I_1[33]={0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 12, 14};
        double J_1[33]={0, 1, 2, 4, 8, 0, 1, 2, 3, 5, 12, 1, 6, 18, 0, 1, 7, 12, 1, 16, 1, 12, 1, 8, 18, 1, 16, 1, 3, 14, 18, 10, 16};
        double n_1[33]={8.01496989929495E-02, -0.543862807146111, 0.337455597421283, 8.9055545115745, 313.840736431485, 0.797367065977789, -1.2161697355624, 8.72803386937477, -16.9769781757602, -186.552827328416, 95115.9274344237, -18.9168510120494, -4334.0703719484, 543212633.012715, 0.144793408386013, 128.024559637516, -67230.9534071268, 33697238.0095287, -586.63419676272, -22140322476.9889, 1716.06668708389, -570817595.806302, -3121.09693178482, -2078413.8463301, 3056059461577.86, 3221.57004314333, 326810259797.295, -1441.04158934487, 410.694867802691, 109077066873.024, -24796465425889.3, 1888019068.65134, -123651009018773};
        double p2bhs=0;
        int i;
        for(i=0;i<33;i++)
            p2bhs+=n_1[i]*pow((hh-0.6),I_1[i])*pow((ss-1.01),J_1[i]);
        p2bhs=pow(p2bhs,4);
        p2bhs*=100;
        return p2bhs;
    }
    ///c区的反推公式
    double p_2chs(double h,double s)
    {
        double hh=h/3500;
        double ss=s/5.9;
        double I_1[31]={0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 10, 12, 16};
        double J_1[31]={0, 1, 2, 3, 4, 8, 0, 2, 5, 8, 14, 2, 3, 7, 10, 18, 0, 5, 8, 16, 18, 18, 1, 4, 6, 14, 8, 18, 7, 7, 10};
        double n_1[31]={0.112225607199012, -3.39005953606712, -32.0503911730094, -197.5973051049, -407.693861553446, 13294.3775222331, 1.70846839774007, 37.3694198142245, 3581.44365815434, 423014.446424664, -751071025.760063, 52.3446127607898, -228.351290812417, -960652.417056937, -80705929.2526074, 1626980172256.69, 0.772465073604171, 46392.9973837746, -13731788.5134128, 1704703926305.12, -25110462818730.8, 31774883083552, 53.8685623675312, -55308.9094625169, -1028615.22421405, 2042494187562.34, 273918446.626977, -2.63963146312685E+15, -1078908541.08088, -29649262098.0124, -1.11754907323424E+15};
        double p2chs=0;
        int i;
        for(i=0;i<31;i++)
            p2chs+=n_1[i]*pow((hh-0.7),I_1[i])*pow((ss-1.1),J_1[i]);
        p2chs=pow(p2chs,4);
        p2chs*=100;
        return p2chs;
    }
    /*////3区的一些补充方程
    /////共分为20个区
    /////ab分区
    double T_3abp(double p)
    {
        double I_3[5]={0,1,2,-1,-2};
        double n_3[5]={0.154793642129415e4,-0.187661219490113e3,0.213144632222113e2,-0.191887498864292e4,0.918419702359447e3};
        double T=0;
        int i;
        for(i=0;i<5;i++)
            T+=n_3[i]*pow(log(p),I_3[i]);
        return T;
    }
    /////cd分区
    double T_3cdp(double p)
    {
        double I_3[4]={0,1,2,3};
        double n_3[4]={0.585276966696349e3,0.278233532206915e1,-0.127283549295878e-1,0.159090746562729e-3};
        double T=0;
        int i;
        for(i=0;i<4;i++)
            T+=n_3[i]*pow(p,I_3[i]);
        return T;
    }
    /////gh分区
    double T_3ghp(double p)
    {
        double I_3[5]={0,1,2,3,4};
        double n_3[5]={-0.249284240900418e5,0.428143584791546e4,-0.269029173140130e3,0.751608051114157e1,-0.787105249910383e-1};
        double T=0;
        int i;
        for(i=0;i<5;i++)
            T+=n_3[i]*pow(p,I_3[i]);
        return T;
    }
    /////ij分区
    double T_3ijp(double p)
    {
        double I_3[5]={0,1,2,3,4};
        double n_3[5]={0.584814781649163e3,-0.616179320924617,0.260763050899562,-0.587071076864459e-2,0.515308185433082e-4};
        double T=0;
        int i;
        for(i=0;i<5;i++)
            T+=n_3[i]*pow(p,I_3[i]);
        return T;
    }	
    ////jk分区
    double T_3jkp(double p)
    {
        double I_3[5]={0,1,2,3,4};
        double n_3[5]={0.617229772068439e3,-0.770600270141675e1,0.697072596851896,-0.157391839848015e-1,0.137897492684194e-3};
        double T=0;
        int i;
        for(i=0;i<5;i++)
            T+=n_3[i]*pow(p,I_3[i]);
        return T;
    }		
    /////mn分区
    double T_3mnp(double p)
    {
        double I_3[4]={0,1,2,3};
        double n_3[4]={0.535339483742384e3,0.761978122720128e1,-0.158365725441648,0.192871054508108e-2};
        double T=0;
        int i;
        for(i=0;i<4;i++)
            T+=n_3[i]*pow(p,I_3[i]);
        return T;
    }		
    /////op分区
    double T_3opp(double p)
    {
        double I_3[5]={0,1,2,-1,-2};
        double n_3[5]={0.969461372400213e3,-0.332500170441278e3,0.642859598466067e2,0.773845935768222e3,-0.152313732937084e4};
        double T=0;
        int i;
        for(i=0;i<5;i++)
            T+=n_3[i]*pow(log(p),I_3[i]);
        return T;
    }
    /////qu分区
    double T_3qup(double p)
    {
        double I_3[4]={0,1,2,3};
        double n_3[4]={0.565603648239126e3,0.529062258221222e1,-0.102020639611016,0.122240301070145e-2};
        double T=0;
        int i;
        for(i=0;i<4;i++)
            T+=n_3[i]*pow(p,I_3[i]);
        return T;
    }	
    /////rx分区
    double T_3rxp(double p)
    {
        double I_3[4]={0,1,2,3};
        double n_3[4]={0.584561202520006e3,-0.102961025163669e1,0.243293362700452,-0.294905044740799e-2};
        double T=0;
        int i;
        for(i=0;i<4;i++)
            T+=n_3[i]*pow(p,I_3[i]);
        return T;
    }	
    /////ef
    double T_3efp(double p)
    {
        double T=3.727888004*(p-22.064)+647.096;
        return T;
    }
    //////3区反推方程的实现
    //////3a
    double v_3apT(double p,double T)
    {
    */

    /////牛顿迭代法求取3区的pT为参数的各项值
    /*////a区(反推焓值)
    double h_3apT(double p,double T)
    {	
        double h=1651.23;
        double hh;
        double T3aph=T_3aph(p,h);
        double T3aphh=T_3aph_h(p,h);
        while(abs(T3aph-T)>=err)
        {
            hh=h/2300;
            hh=hh+(T-T3aph)/T3aphh;
            h=hh*2300;
            T3aph=T_3aph(p,h);
            T3aphh=T_3aph_h(p,h);
        }
        return h;
    }
    ////b区(反推焓值)
    double h_3bpT(double p,double T)
    {	
        double h=2329.06;
        double hh;
        double T3bph=T_3bph(p,h);
        double T3bphh=T_3bph_h(p,h);
        while(abs(T3bph-T)>=err)
        {
            hh=h/2800;
            hh=hh+(T-T3bph)/T3bphh;
            h=hh*2800;
            T3bph=T_3bph(p,h);
            T3bphh=T_3bph_h(p,h);
        }
        return h;
    }
    *////3区计算辅助方程
    /*double AuxFunc(double rho,double T)
    {
        double rr=rho/322;
        double F=rr*him_3rho(rho,T)+him_3rhoT(rho,T);
        return F;
    }
    double Fuc(double rho1,double rho2,double T)
    {
        return AuxFunc(rho1,T)-AuxFunc(rho2,T);
    }
    double Fuc1(double rho1,double T)
    {
        double rr=rho1/322;
        double F=him_3rho(rho1,T)+rr*him_3rhor(rho1,T)+him_3rho(rho1,T);
        return F;
    }
    double Fuc2(double rho2,double T)
    {
        double rr=rho2/322;
        double F=him_3rho(rho2,T)+rr*him_3rhor(rho2,T)+him_3rho(rho2,T);
        return -F;
    }
    double Fub2(double rho2,double T)
    {
        double rr=rho2/322;
        double F=2*rho2*R*T*him_3rho(rho2,T)+rr*rho2*R*T*him_3rhor(rho2,T);
        return F;
    }
    double Fu(double rho2,double T)
    {
        double F=p_3rhoT(rho2,T)-p_4T(T);
        return F;
    }
    double *rho(double T)
    {
        double rho1=100,rho2=500;
        double rr1=rho1/322,rr2=rho2/322;
        double Au=Fuc(rho1,rho2,T);
        double F=Fu(rho2,T);
        double FF=Fu(rho1,T);
        double Fc1=Fuc1(rho1,T);
        double Fb1=Fub2(rho1,T);
        double Fc2=Fuc2(rho2,T);
        double Fb2=Fub2(rho2,T);
        while(abs(Au)>=err||abs(F)>=err||abs(FF)>=err)
        {
            rr1=rr1+(-Au*Fb2+F*Fc2)/(Fc1*Fb2)+(-FF*Fc1)/(Fc1*Fb1);
            cout<<rr1<<endl;
            rr2=rr2+(-F*Fc1)/(Fc1*Fb2)+(-FF*Fc1)/(Fc1*Fb1);
            cout<<rr2<<endl;
            rho1=rr1*322;
            rho2=rr2*322;
            Au=Fuc(rho1,rho2,T);
            F=Fu(rho2,T);
            FF=Fu(rho1,T);
            Fc1=Fuc1(rho1,T);
            Fc2=Fuc2(rho2,T);
            Fb1=Fub2(rho1,T);
            Fb2=Fub2(rho2,T);
            cout<<Au<<endl;
            cout<<F<<endl;
            cout<<FF<<endl;
        }
        cout<<p_4T(T)<<endl;
        cout<<p_3rhoT(rho2,T)<<endl;
        cout<<Au<<endl;
        cout<<F<<endl;
        cout<<rho1<<endl;
        cout<<rho2<<endl;
        double *a=0;
        *a=rho1;
        *(a+1)=rho2;
        return a;
    }
    double F(double rho,double T)
    {
        return p_3rhoT(rho,T)-p_4T(T);
    }
    double Ex(double rho,double T)
    {
        return p_4T(T)/R/T/rho+him_3rhoT(rho,T);
    }
    double E(double rho1,double rho2,double T)
    {
        return Ex(rho2,T)-Ex(rho1,T);
    }
    double Fd(double rho,double T)
    {
        return 2*rho*R*T*him_3rho(rho,T)+R*T*rho*rho/322*him_3rhor(rho,T);
    }
    double Ed(double rho,double T)
    {
        return p_4T(T)*322/R/T/rho/rho-him_3rho(rho,T);
    }
    double rho_3pT(double T)
    {
        double rho1=574.62,rho2=200;
        double A1=Fd(rho1,T);
        double A2=Fd(rho2,T);
        double A3=Ed(rho1,T);
        double A4=-Ed(rho2,T);
        double F1=F(rho1,T);
        double	F2=F(rho2,T);
        double F3=E(rho1,rho2,T);
        double rr1=rho1/322;
        double rr2=rho2/322;
        while(abs(F1)>=err1||abs(F2)>=err1||abs(F3)>=err1)
        {	
            if(abs(A1)<=err||abs(A2)<=err||abs(A3)<=err||abs(A4)<=err)
                break;
            rr1+=(A4*F2/A2/A3-F3/A3)/2;
            rr2+=(A3*F1/A1/A4-F3/A4)/2;
            rho1=rr1*322;
            rho2=rr2*322;
            A1=Fd(rho1,T);
            A2=Fd(rho2,T);
            A3=Ed(rho1,T);
            A4=-Ed(rho2,T);
            F1=F(rho1,T);
            F2=F(rho2,T);
            F3=E(rho1,rho2,T);
            cout<<rho1<<endl;
            cout<<rho2<<endl;
            cout<<F1<<endl;
            cout<<F2<<endl;
            cout<<F3<<endl;
            cout<<p_3rhoT(rho1,T)<<endl;
        }
        cout<<rho1<<endl;
        cout<<rho2<<endl;
        return rho1/rho2;
    }

    double F(double rho,double T,double p)
    {
        return p_3rhoT(rho,T)-p;
    }
    double Fd(double rho,double T)
    {
        return 2*rho*R*T*him_3rho(rho,T)+R*T*rho*rho/322*him_3rhor(rho,T);
    }
    */

    double function_rho(double rho,double p,double T)
    {
        double function=p*1000/rho/R/T-rho/322*him_3rho(rho,T);
        return function;
    }
    double rho_3pT(double p,double T)
    {
        double rho1=500,rho2=600;
        double rr1=rho1/322,rr2=rho2/322;
        double rho,rr;
        double F1=function_rho(rho1,p,T);
        double F2=function_rho(rho2,p,T);

        while(abs((rho1-rho2)/rho2)>=err)
        {
            rr=rr2-F2/(F2-F1)*(rr2-rr1);
            rho=rr*322;
            rho1=rho2;
            rho2=rho;
            rr1=rho1/322;
            rr2=rho2/322;
            F1=function_rho(rho1,p,T);
            F2=function_rho(rho2,p,T);
        }
        return rho2;
    }
    double function_rho2(double rho,double p,double rho1,double T)
    {

        
        double rr=rho/322,rr1=rho1/322;
        double F=rr*him_3rho(rho,T)-p*1000/R/T/rho1+him_3rhoT(rho,T)-him_3rhoT(rho1,T);
        return F;
    }
    double rho_3p_sat(double p)
    {
        double rho1=100,rho2=150;
        double rr1=rho1/322,rr2=rho2/322;
        double rho,rr;
        double T=T_4p(p);
        double rho0=rho_3pT(p,T);
        double F1=function_rho2(rho1,p,rho0,T);
        double F2=function_rho2(rho2,p,rho0,T);

        while(abs((rho1-rho2)/rho2)>=err)
        {
            rr=rr2-F2/(F2-F1)*(rr2-rr1);
            rho=rr*322;
            rho1=rho2;
            rho2=rho;
            rr1=rho1/322;
            rr2=rho2/322;
            F1=function_rho2(rho1,p,rho0,T);
            F2=function_rho2(rho2,p,rho0,T);
        }
        return rho2;
    }
    double rho_3T_sat(double T)
    {
        double rho1=118,rho2=119.49;
        double rr1=rho1/322,rr2=rho2/322;
        double rho,rr;
        double p=p_4T(T);
        double rho0=rho_3pT(p,T);
        double F1=function_rho2(rho1,p,rho0,T);
        double F2=function_rho2(rho2,p,rho0,T);
        while(abs((rho1-rho2)/rho2)>=err)
        {
            rr=rr2-F2/(F2-F1)*(rr2-rr1);
            rho=rr*322;
            rho1=rho2;
            rho2=rho;
            rr1=rho1/322;
            rr2=rho2/322;
            F1=function_rho2(rho1,p,rho0,T);
            F2=function_rho2(rho2,p,rho0,T);
        }
        return rho2;
    }
    double h_3pT(double p,double T)
    {
        return h_3rhoT(rho_3pT(p,T),T);
    }
    double s_3pT(double p,double T)
    {
        return s_3rhoT(rho_3pT(p,T),T);
    }
    double v_3pT(double p,double T)
    {
        return 1/rho_3pT(p,T);
    }
    double u_3pT(double p,double T)
    {
        return u_3rhoT(rho_3pT(p,T),T);
    }
    double cp_3pT(double p,double T)
    {
        return cp_3rhoT(rho_3pT(p,T),T);
    }
    double cv_3pT(double p,double T)
    {
        return cv_3rhoT(rho_3pT(p,T),T);
    }
    double w_3pT(double p,double T)
    {
        return w_3rhoT(rho_3pT(p,T),T);
    }
    ///二区的总体计算
    double T_2ph(double p,double h)
    {
        if(p>=p_2bch(h))
            return T_2cph(p,h);
        else
            if(p>=4)
                return T_2bph(p,h);
            else
                return T_2aph(p,h);
    }
    double T_2ps(double p,double s)
    {
        if(s<=5.85)
            return T_2cps(p,s);
        else
            if(p>=4)
                return T_2bps(p,s);
            else
                return T_2aps(p,s);
    }



    ////五区的反推
    double fph5(double p,double h,double T)
    {	
        double tt=1000/T;
        double go5t=go_5t(p,T);
        double gr5t=gr_5t(p,T);
        double T1=h/(R*tt*(go5t+gr5t));
        return T1;
    }
    double T_5ph(double p,double h)
    {
        double T1=1500;
        double T2=fph5(p,h,T1);
        while(abs((T1-T2)/T2)>=err)
        {
            T1=T2;
            T2=fph5(p,h,T1);
        }
        return T2;
    }
    double Fps5(double p,double s,double T)
    {	
        return s-s_5pT(p,T);
    }
    double T_5ps(double p,double s)
    {
        double T1=1500;
        double T2=1600;
        double F1=Fps5(p,s,T1);
        double F2=Fps5(p,s,T2);
        double T;
        while(abs((T1-T2)/T2)>=err)
        {
            T=T2-F2/(F2-F1)*(T2-T1);
            T1=T2;
            T2=T;
            F1=Fps5(p,s,T1);
            F2=Fps5(p,s,T2);
        }
        return T2;
    }
}